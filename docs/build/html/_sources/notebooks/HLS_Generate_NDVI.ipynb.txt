{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bIzwmwY3yVzT"
      },
      "source": [
        "\n",
        "## Background  \n",
        "\n",
        "The  Harmonized Landsat Sentinel-2 ([HLS](https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/)) project produces seamless, harmonized surface reflectance data from the Operational Land Imager (OLI) and Multi-Spectral Instrument (MSI) aboard Landsat and Sentinel-2 Earth-observing satellites, respectively. The aim is to produce seamless products with normalized parameters, which include atmospheric correction, cloud and cloud-shadow masking, geographic co-registration and common gridding, normalized bidirectional reflectance distribution function, and spectral band adjustment. This will provide global observation of the Earthâ€™s surface every 2-3 days with 30 meter spatial resolution. One of the major applications that will benefit from HLS is agriculture assessment and monitoring, which is used as the use case for this tutorial.  \n",
        "\n",
        "NASA's Land Processes Distributed Active Archive Center (LP DAAC) archives and distributes HLS products in the LP DAAC Cumulus cloud archive as Cloud Optimized GeoTIFFs (COG). This tutorial will demonstrate  Because these data are stored as COGs, this tutorial will teach users how to load subsets of individual files into memory for just the bands you are interested in--a paradigm shift from the more common workflow where you would need to download a .zip/HDF file containing every band over the entire scene/tile. This tutorial covers how to process HLS data (calculate EVI), visualize, and \"stack\" the scenes over a region of interest into an [xarray](http://xarray.pydata.org/en/stable/) data array, calculate statistics for an EVI time series, and export as a comma-separated values (CSV) file--providing you with all of the information you need for your area of interest without having to download the source data file. The Enhanced Vegetation Index ([EVI](https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_4.php)), is a vegetation index similar to NDVI that has been found to be more sensitive to ground cover below the vegetated canopy and saturates less over areas of dense green vegetation.  \n",
        "\n",
        "## Requirements  \n",
        "\n",
        "- A [NASA Earthdata Login](https://urs.earthdata.nasa.gov/) account is required to download the data used in this tutorial. You can create an account at the link provided.\n",
        "\n",
        "- You will will also need to have a netrc file set up in your home directory in order to successfully run the code below. A code chunk in a later section provides a way to do this, or you can check out the [setup_intstructions.md](../../python/setup/setup_instructions.md).  \n",
        "\n",
        "## Learning Objectives\n",
        "\n",
        "- How to work with HLS Landsat ([HLSL30.002](https://doi.org/10.5067/HLS/HLSL30.002)) and Sentinel-2 ([HLSS30.002](https://doi.org/10.5067/HLS/HLSS30.002)) data products  \n",
        "- How to query and subset HLS data using the `earthaccess` library  \n",
        "- How to access and work with HLS data  \n",
        "\n",
        "## Data Used  \n",
        "\n",
        "- Daily 30 meter (m) global HLS Sentinel-2 Multi-spectral Instrument Surface Reflectance - [HLSS30.002](https://doi.org/10.5067/HLS/HLSS30.002)  \n",
        "    - The HLSS30 product provides 30 m Nadir normalized Bidirectional Reflectance Distribution Function (BRDF)-Adjusted Reflectance (NBAR) and is derived from Sentinel-2A and Sentinel-2B MSI data products.  \n",
        "    - Science Dataset (SDS) layers:  \n",
        "        - B8A (NIR Narrow)  \n",
        "        - B04 (Red)  \n",
        "        - B02 (Blue)  \n",
        "        - Fmask (Fmask)\n",
        "- Daily 30 meter (m) global HLS Landsat-8 OLI Surface Reflectance - [HLSL30.002](https://doi.org/10.5067/HLS/HLSL30.002)  \n",
        "    - The HLSL30 product provides 30 m Nadir normalized Bidirectional Reflectance Distribution Function (BRDF)-Adjusted Reflectance (NBAR) and is derived from Landsat-8 OLI data products.  \n",
        "     - Science Dataset (SDS) layers:  \n",
        "        - B05 (NIR)  \n",
        "        - B04 (Red)  \n",
        "        - B02 (Blue)   \n",
        "        - Fmask (Fmask)\n",
        "\n",
        "## Tutorial Outline  \n",
        "\n",
        "1. [**Getting Started**](#getstarted)  \n",
        "    1.1 Import Packages  \n",
        "    1.2 EarthData Login  \n",
        "2. [**Finding HLS Data**](#find)  \n",
        "3. [**Accessing HLS COG Data in the Cloud**](#cloudaccess)  \n",
        "    3.1 Subset by Band\n",
        "    3.2 View Browse Image\n",
        "    3.3 Load COGS into Memory  \n",
        "    3.4 Subset Spatially  \n",
        "    3.5 Apply Scale Factor  \n",
        "4. [**Processing HLS Data**](#processhls)   \n",
        "    4.1 Calculate EVI  \n",
        "    4.2 Quality Filtering  \n",
        "    4.3 Export to COG  \n",
        "5. [**Automation**](#automation)  \n",
        "6. [**Stacking HLS Data**](#stackhls)  \n",
        "    6.1 Open and Stack COGs  \n",
        "    6.2 Visualize Stacked Time Series  \n",
        "7. [**Export Statistics**](#export)  \n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x2nIPqH1yVzV"
      },
      "source": [
        "## 1. Getting Started<a id=\"getstarted\"></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "93jJw76ZyVzW"
      },
      "source": [
        "### 1.1 Import Packages"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZD_MUgSGyVzW"
      },
      "source": [
        "Import the required packages."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "TYFgyv0qyVzW",
        "outputId": "9ddc3c91-ac41-4d8c-da65-ad33ae8bcda1",
        "tags": []
      },
      "outputs": [],
      "source": [
        "import os\n",
        "from datetime import datetime\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import geopandas as gp\n",
        "from skimage import io\n",
        "import matplotlib.pyplot as plt\n",
        "from osgeo import gdal\n",
        "import xarray as xr\n",
        "import rioxarray as rxr\n",
        "import hvplot.xarray\n",
        "import hvplot.pandas\n",
        "import earthaccess"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ReWtrplmyVzX"
      },
      "source": [
        "### 1.2 Earthdata Login Authentication\n",
        "\n",
        "We will use the [`earthaccess`](https://github.com/nsidc/earthaccess#readme) package for authentication. `earthaccess` can either createa a new local `.netrc` file to store credentials or validate that one exists already in you user profile. If you do not have a `.netrc` file, you will be prompted for your credentials and one will be created.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Z6mov1UyVzX",
        "outputId": "322ea0ad-e8d7-4f12-c3cd-9d384b61abe8",
        "tags": []
      },
      "outputs": [],
      "source": [
        "earthaccess.login(persist=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KBDqOrbXyVzX"
      },
      "source": [
        "## 2. Finding HLS Data using `earthaccess` <a id=\"find\"></a>\n",
        "\n",
        "To find HLS data, we will use the `earthaccess` python library to search NASA's Common Metadata Repository (CMR) for HLS data. We will use an geojson file containing our region of interest (ROI) to search for files that intersect. To do this, we will simplify it to a bounding box. Grab the bounding coordinates from the geopandas object after opening.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "soMqEzoMyVzX"
      },
      "source": [
        "First we will read in our geojson file using `geopandas`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JweJWR1xyVzX",
        "tags": []
      },
      "outputs": [],
      "source": [
        "field = gp.read_file('/scratch/users/rajarshi/Quanterra/HE_footprint_90_percent.geojson')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_AkCAn8HyVzX"
      },
      "source": [
        "We will use the `total_bounds` property to get the bounding box of our ROI, and add that to a python tuple, which is the expected data type for the bounding_box parameter `earthaccess` `search_data`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FYPujEb7yVzX",
        "outputId": "edb3e289-8036-4da0-aeda-e1c77addaf1a",
        "tags": []
      },
      "outputs": [],
      "source": [
        "bbox = tuple(list(field.total_bounds))\n",
        "bbox"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZM-Vi4GhyVzY"
      },
      "source": [
        "When searching we can also search a specific time period of interest. Here we search from the beginning of May 2021 to the end of September 2021."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "atoT_vViyVzY",
        "tags": []
      },
      "outputs": [],
      "source": [
        "temporal = (\"2023-01-01T00:00:00\", \"2023-12-31T23:59:59\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uh7Y4LPtyVzY"
      },
      "source": [
        "Since the HLS collection contains to products, i.e. HLSL30 and HLSS30, we will include both short names. Search using our constraints and the `count = 100` to limit our search to 100 results."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UsJaKE56yVzY",
        "tags": []
      },
      "outputs": [],
      "source": [
        "results = earthaccess.search_data(\n",
        "    short_name=['HLSL30','HLSS30'],\n",
        "    bounding_box=bbox,\n",
        "    temporal=temporal,\n",
        "    count=1000\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ilY_qL56yVzY"
      },
      "source": [
        "We can preview these results in a `pandas` `dataframe` we want to check the metadata. Note we only show the first 5."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 533
        },
        "id": "RhkPPDm9yVzY",
        "outputId": "41c6830b-bb0f-4f01-f730-c2cf789927fd",
        "tags": []
      },
      "outputs": [],
      "source": [
        "pd.json_normalize(results).head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uA4BTsfvyVzY"
      },
      "source": [
        "We can also preview each individual results by selecting it from the list. This will show the data links, and a browse image."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "f56yHpRpyVzY",
        "outputId": "c119bd24-743a-4129-9cf4-b31582169a01",
        "tags": []
      },
      "outputs": [],
      "source": [
        "results[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T4eYt4xNyVzY"
      },
      "source": [
        "We can grab all of the URLs for the data using [`list comprehension`](https://www.w3schools.com/python/python_lists_comprehension.asp)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CwCKr3YHyVzY",
        "outputId": "c206a6c2-52af-456b-ed7a-924546daf906",
        "tags": []
      },
      "outputs": [],
      "source": [
        "hls_results_urls = [granule.data_links() for granule in results]\n",
        "hls_results_urls[0:1] # Show a subset of the list"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eKdIEw0AyVzZ"
      },
      "source": [
        "We can get the URLs for the browse images as well."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rnGX8KdByVzZ",
        "outputId": "facf6b81-2251-457d-c45d-1a0f65f17ebe",
        "tags": []
      },
      "outputs": [],
      "source": [
        "browse_urls = [granule.dataviz_links()[0] for granule in results] # 0 retrieves only the https links\n",
        "browse_urls[0:2]  # Show a subset of the list"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zahitGEKyVzZ"
      },
      "source": [
        "## 3. Accessing HLS Cloud Optimized GeoTIFFs (COGs) from Earthdata Cloud <a id=\"extracthls\"></a>\n",
        "\n",
        "Now that we have a list of data URLs, we will configure `gdal` and `rioxarray` to access the cloud assets that we are interested in, and read them directly into memory without needing to download the files."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pvNh507YyVzZ"
      },
      "source": [
        "The Python libraries used to access COG files in Earthdata Cloud leverage GDAL's virtual file systems. Whether you are running this code in the Cloud or in a local workspace, GDAL configurations must be set in order to successfully access the HLS COG files. The settings below enable GDAL to send authentication information when accessing the HLS COG files in the Earthdata Cloud and also enable retrying connections in case of network issues."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OuYaCam2yVzZ",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# GDAL configurations used to successfully access LP DAAC Cloud Assets via vsicurl\n",
        "gdal.SetConfigOption('GDAL_HTTP_COOKIEFILE','~/cookies.txt')\n",
        "gdal.SetConfigOption('GDAL_HTTP_COOKIEJAR', '~/cookies.txt')\n",
        "gdal.SetConfigOption('GDAL_DISABLE_READDIR_ON_OPEN','EMPTY_DIR')\n",
        "gdal.SetConfigOption('CPL_VSIL_CURL_ALLOWED_EXTENSIONS','TIF')\n",
        "gdal.SetConfigOption('GDAL_HTTP_UNSAFESSL', 'YES')\n",
        "gdal.SetConfigOption('GDAL_HTTP_MAX_RETRY', '10')\n",
        "gdal.SetConfigOption('GDAL_HTTP_RETRY_DELAY', '0.5')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1kz6GMAqyVzZ"
      },
      "source": [
        "### 3.1 Subset by Band"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KAAw51aXyVzZ"
      },
      "source": [
        "Lets take a look at the URLs for one of our returned granules."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zG5feNONyVzZ",
        "outputId": "698c213f-6bc4-4d25-ecd5-149ddfc80aac",
        "scrolled": true,
        "tags": []
      },
      "outputs": [],
      "source": [
        "h = hls_results_urls[10]\n",
        "h"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "goY75PyGyVzZ"
      },
      "source": [
        "To calculate the EVI for each granule we need the near-infrared, red, and blue bands. Below you can find the different band numbers for each of the two products."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oxsUOxTuyVzZ"
      },
      "source": [
        "### Sentinel 2:\n",
        "        - \"narrow\" NIR = B8A\n",
        "        - Red = B04\n",
        "        - Blue = B02  \n",
        "        - Fmask = Fmask\n",
        "### Landsat 8:\n",
        "        - NIR = B05\n",
        "        - Red = B04\n",
        "        - Blue = B02  \n",
        "        - Fmask = Fmask"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MCZJRoIGyVza"
      },
      "source": [
        " We will subset our URLs to include the bands identified above."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j6lfvn4xyVza",
        "outputId": "a98ac580-5a75-46c6-d13f-89d6a4f45a8d",
        "tags": []
      },
      "outputs": [],
      "source": [
        "evi_band_links = []\n",
        "\n",
        "# Define which HLS product is being accessed\n",
        "if h[0].split('/')[4] == 'HLSS30.020':\n",
        "    evi_bands = ['B8A', 'B04', 'B02', 'Fmask'] # NIR RED BLUE for S30\n",
        "else:\n",
        "    evi_bands = ['B05', 'B04', 'B02', 'Fmask'] # NIR RED BLUE for L30\n",
        "\n",
        "# Subset the assets in the item down to only the desired bands\n",
        "for a in h:\n",
        "    if any(b in a for b in evi_bands):\n",
        "        evi_band_links.append(a)\n",
        "evi_band_links"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I1sA4MeKyVza"
      },
      "source": [
        "### 3.2 View Browse Image\n",
        "\n",
        "Remember from above that you can always quickly load in the browse image to get a quick view of the item using our list of browse URLs."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "LPf7yqbgyVza",
        "outputId": "e6a09e3a-91fa-49f8-a6c8-4a63477de50a",
        "tags": []
      },
      "outputs": [],
      "source": [
        "image = io.imread(browse_urls[0])  # Load jpg browse image into memory\n",
        "\n",
        "# Basic plot of the image\n",
        "plt.figure(figsize=(10,10))\n",
        "plt.imshow(image)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z_Wt8rooyVza"
      },
      "source": [
        "Above, we see our first observation over the northern Central Valley of California."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "N_cY7zQhyVza",
        "tags": []
      },
      "outputs": [],
      "source": [
        "del image # Remove the browse image"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vv25MkyUyVza"
      },
      "source": [
        "### 3.3 Load HLS COGs into Memory"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rQ82ats1yVzi"
      },
      "source": [
        "HLS COGs are broken into chunks allowing data to be read more efficiently. Define the chunk size of an HLS tile, mask the NaN values, then read the files using `rioxarray` and name them based upon the band. We also squeeze the object to remove the band dimension from most of the files, since there is only 1 band."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1msCcXnVyVzi"
      },
      "source": [
        "> **NOTE:** To scale the bands, you can set the `mask_and_scale` to `True` (`mask_and_scale=True`), however the `scale_factor` information in some of the HLSL30 granules are found in the `file` metadata, but missing from the `Band` metadata. `rioxarray` looks for the `scale_factor` under `Band` metadata and if this information is missing it assumes the `scale_factor` is equal to 1. This results in having data to be uscaled and not masked for those granules. That is why we treat our data a bit differently here, leaving it unscaled and manually updating the `scale_factor` attribute in the `xarray` `dataarray`.   "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "EoIQF3AK1OFP",
        "outputId": "941d23a8-68bd-4c35-fef4-16f8e5269af6"
      },
      "outputs": [],
      "source": [
        "evi_band_links[0].rsplit('.', 2)[-2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "yhX43pGI862C",
        "outputId": "21ac7908-3ce4-474e-9ebe-b5800ea23579"
      },
      "outputs": [],
      "source": [
        "evi_band_links[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 686
        },
        "id": "NxoMQUfy67Rh",
        "outputId": "3172f4a7-c4ce-4707-9fc9-d09743ec4d88"
      },
      "outputs": [],
      "source": [
        "# rxr.open_rasterio(evi_band_links[0], chunks=chunk_size, masked=True).squeeze('band', drop=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MxiGm-GG16A0",
        "outputId": "f93f9694-d42e-42d6-a01d-877fe1e32b3e"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import requests\n",
        "import dask\n",
        "\n",
        "# Set up a local cache directory\n",
        "\n",
        "path_to_data = '/scratch/users/rajarshi/Quanterra/Field_sat_data_HE_90'\n",
        "local_dir = f\"{path_to_data}/local_NDVI_bands\"\n",
        "os.makedirs(path_to_data, exist_ok=True)\n",
        "os.makedirs(local_dir, exist_ok=True)\n",
        "\n",
        "def download_file(url, dest_folder):\n",
        "    local_path = os.path.join(dest_folder, os.path.basename(url))\n",
        "    if not os.path.exists(local_path):\n",
        "        print(f\"Downloading: {url}\")\n",
        "        with requests.get(url, stream=True) as r:\n",
        "            r.raise_for_status()\n",
        "            with open(local_path, 'wb') as f:\n",
        "                for chunk in r.iter_content(chunk_size=8192):\n",
        "                    f.write(chunk)\n",
        "    return local_path\n",
        "\n",
        "chunk_size = dict(band=1, x=512, y=512)\n",
        "for e in evi_band_links:\n",
        "    local_path = download_file(e, local_dir)\n",
        "    fname = os.path.splitext(os.path.basename(e))[0].split('.')[-1]\n",
        "\n",
        "    if fname == evi_bands[0]:  # NIR\n",
        "        nir = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "        print('Loaded nir')\n",
        "        nir.attrs['scale_factor'] = 0.0001\n",
        "    elif fname == evi_bands[1]:  # red\n",
        "        red = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "        print('Loaded red')\n",
        "        red.attrs['scale_factor'] = 0.0001\n",
        "    elif fname == evi_bands[2]:  # blue\n",
        "        blue = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "        print('Loaded blue')\n",
        "        blue.attrs['scale_factor'] = 0.0001\n",
        "    elif fname == evi_bands[3]:  # fmask\n",
        "        fmask = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "        print('Loaded fmask')\n",
        "        # No Scaling for Fmask\n",
        "print(\"The COGs have been downloaded and loaded into memory!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SN6PYB6iyVzi",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# # Use vsicurl to load the data directly into memory (be patient, may take a few seconds)\n",
        "# chunk_size = dict(band=1, x=512, y=512) # Tiles have 1 band and are divided into 512x512 pixel chunks\n",
        "# for e in evi_band_links:\n",
        "#     print(e)\n",
        "#     # Open and build datasets\n",
        "#     if e.rsplit('.', 2)[-2] == evi_bands[0]:      # NIR index\n",
        "#         nir = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         nir.attrs['scale_factor'] = 0.0001        # hard coded the scale_factor attribute\n",
        "#     elif e.rsplit('.', 2)[-2] == evi_bands[1]:    # red index\n",
        "#         red = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         red.attrs['scale_factor'] = 0.0001        # hard coded the scale_factor attribute\n",
        "#     elif e.rsplit('.', 2)[-2] == evi_bands[2]:    # blue index\n",
        "#         blue = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         blue.attrs['scale_factor'] = 0.0001       # hard coded the scale_factor attribute\n",
        "#     elif e.rsplit('.', 2)[-2] == evi_bands[3]:\n",
        "#         fmask = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         # No Scaling for Fmask\n",
        "\n",
        "# print(\"The COGs have been loaded into memory!\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Yc4XUFjW5SPO"
      },
      "outputs": [],
      "source": [
        "# # Use vsicurl to load the data directly into memory (be patient, may take a few seconds)\n",
        "# chunk_size = dict(band=1, x=512, y=512) # Tiles have 1 band and are divided into 512x512 pixel chunks\n",
        "# for e in evi_band_links:\n",
        "#     print(e)\n",
        "#     # Open and build datasets\n",
        "#     if e.rsplit('.', 2)[-2] == evi_bands[0]:      # NIR index\n",
        "#         import requests\n",
        "#         response = requests.head(e)\n",
        "#         if response.status_code != 200:\n",
        "#             print(f\"Warning: Unable to access file: {e}\")\n",
        "#             continue  # Skip this file and proceed to the next one\n",
        "#         nir = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         nir.attrs['scale_factor'] = 0.0001        # hard coded the scale_factor attribute\n",
        "#     elif e.rsplit('.', 2)[-2] == evi_bands[1]:    # red index\n",
        "#         import requests\n",
        "#         response = requests.head(e)\n",
        "#         if response.status_code != 200:\n",
        "#             print(f\"Warning: Unable to access file: {e}\")\n",
        "#             continue  # Skip this file and proceed to the next one\n",
        "#         red = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         red.attrs['scale_factor'] = 0.0001        # hard coded the scale_factor attribute\n",
        "#     elif e.rsplit('.', 2)[-2] == evi_bands[2]:    # blue index\n",
        "#         import requests\n",
        "#         response = requests.head(e)\n",
        "#         if response.status_code != 200:\n",
        "#             print(f\"Warning: Unable to access file: {e}\")\n",
        "#             continue  # Skip this file and proceed to the next one\n",
        "#         blue = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         blue.attrs['scale_factor'] = 0.0001       # hard coded the scale_factor attribute\n",
        "#     elif e.rsplit('.', 2)[-2] == evi_bands[3]:\n",
        "#         # Check if the file exists and is accessible before opening it\n",
        "#         import requests\n",
        "#         response = requests.head(e)\n",
        "#         if response.status_code != 200:\n",
        "#             print(f\"Warning: Unable to access file: {e}\")\n",
        "#             continue  # Skip this file and proceed to the next one\n",
        "\n",
        "#         fmask = rxr.open_rasterio(e, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#         # No Scaling for Fmask\n",
        "\n",
        "# print(\"The COGs have been loaded into memory!\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4xsnIsBoyVzj"
      },
      "source": [
        "> **NOTE:** Getting an error in the section above? Accessing these files in the cloud requires you to authenticate using your NASA Earthdata Login account. You will need to have a netrc file set up containing those credentials in your home directory in order to successfully run the code below. Please make sure you have a valid username and password in the created netrc file."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BSBVJKLpyVzj"
      },
      "source": [
        "We can take a quick look at one of the `dataarray` we just read in."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 401
        },
        "id": "wHeCl2ShyVzj",
        "outputId": "c6cd9553-5ec6-49dd-dbd9-01ded6e90f62",
        "tags": []
      },
      "outputs": [],
      "source": [
        "nir"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XpAsN8-jyVzj"
      },
      "source": [
        "**Note** the full size of the array, **y**=3660 & **x**=3660"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1fvHvafZyVzj"
      },
      "source": [
        "### 3.4 Subset spatially"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Aan_K8pNyVzj"
      },
      "source": [
        "Before we can subset using our input farm field, we will first need to convert the `geopandas` dataframe from lat/lon (EPSG: 4326) into the [projection used by HLS](https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/#hls-tiling-system), UTM (aligned to the Military Grid Reference System). Since UTM is a zonal projection, we'll need to extract the unique UTM zonal projection parameters from our input HLS files and use them to transform the coordinate of our input farm field."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JPCu8nFfyVzj"
      },
      "source": [
        "We can print out the WKT string for our HLS tiles."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 88
        },
        "id": "PAAotvIxyVzj",
        "outputId": "98ce9e12-f931-432b-a9be-232caa345655",
        "tags": []
      },
      "outputs": [],
      "source": [
        "nir.spatial_ref.crs_wkt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5updflpdyVzj"
      },
      "source": [
        "We will use this information to transform the coordinates of our ROI to the proper UTM projection."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "tfiAygjeyVzj",
        "outputId": "a403e444-a815-4986-ed99-a3c7f7110813",
        "tags": []
      },
      "outputs": [],
      "source": [
        "fsUTM = field.to_crs(nir.spatial_ref.crs_wkt) # Take the CRS from the NIR tile that we opened and apply it to our field geodataframe.\n",
        "fsUTM"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V1LnBXJOyVzj"
      },
      "source": [
        "Now, we can use our field ROI to mask any pixels that fall outside of it and crop to the bounding box using `rasterio`. This greatly reduces the amount of data that are needed to load into memory."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 360
        },
        "id": "wLE8W0ATyVzk",
        "outputId": "c09b2a84-3c1d-4a30-ae2d-d45f567e9c68",
        "tags": []
      },
      "outputs": [],
      "source": [
        "nir_cropped = nir.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True) # All touched includes any pixels touched by the polygon\n",
        "nir_cropped"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qcDoJ_qQyVzk"
      },
      "source": [
        "**Note** that the array size is considerably smaller than the full size we read in before."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rmYpKcHGyVzk"
      },
      "source": [
        "Now we will plot the cropped NIR data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "0bKnxB67yVzk",
        "outputId": "1b17efe3-98ba-4457-b508-d3ea2d007229",
        "tags": []
      },
      "outputs": [],
      "source": [
        "nir_cropped.hvplot.image(cmap='viridis', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI').opts(title='HLS Cropped NIR Band')  # Quick visual to assure that it worked"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yCeOFwvayVzk"
      },
      "source": [
        "Above, you can see that the data have been loaded into memory already subset to our ROI. Also notice that the data has not been scaled (see the legend). We will next scaled the data using the function defined below."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7UXw6nnIyVzk"
      },
      "source": [
        "### 3.5 Apply Scale Factor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4ORRanlTyVzk",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# Define function to scale\n",
        "def scaling(band):\n",
        "    scale_factor = band.attrs['scale_factor']\n",
        "    band_out = band.copy()\n",
        "    band_out.data = band.data*scale_factor\n",
        "    band_out.attrs['scale_factor'] = 1\n",
        "    return(band_out)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cG8SP1ayyVzk",
        "tags": []
      },
      "outputs": [],
      "source": [
        "nir_cropped_scaled = scaling(nir_cropped)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ucBp3-ityVzk"
      },
      "source": [
        "We can plot to confirm our manual scaling worked."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "E5ySGwxgyVzk",
        "outputId": "27f5946c-1fd2-48e5-dc8f-0e11a9478be2",
        "tags": []
      },
      "outputs": [],
      "source": [
        "nir_cropped_scaled.hvplot.image(cmap='viridis', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI').opts(title='HLS Cropped NIR Band')  # Quick visual to assure that it worked"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_3_8qCwbyVzk"
      },
      "source": [
        "Next, load in the red and blue bands and fix their scaling as well. We will also load the Fmask data, but this layer does not need to be scaled."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_n5_mJq7yVzl",
        "outputId": "36066d81-913a-4c0b-d271-6ea3cf03a68a",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# Red\n",
        "red_cropped = red.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "red_cropped_scaled = scaling(red_cropped)\n",
        "# Blue\n",
        "blue_cropped = blue.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "blue_cropped_scaled = scaling(blue_cropped)\n",
        "# Fmask\n",
        "fmask_cropped = fmask.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "\n",
        "print('Data is loaded and scaled!')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l1-qcbP5yVzl"
      },
      "source": [
        "## 4. Processing HLS Data <a id=\"processhls\"></a>\n",
        "\n",
        "In this section we will use the HLS data we've access to calculate the EVI. We will do this by defining a function to calculate EVI that will retain the attributes and metadata associated with the data we accessed."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z2c87zYHyVzl"
      },
      "source": [
        "### 4.1 Calculate EVI"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JBKXLGyMyVzl"
      },
      "source": [
        "Below is a function we'll use to calculate EVI using the NIR, Red, and Blue bands. The function will:\n",
        "1. build a new `xarray` `dataarray` with EVI values\n",
        "2. copy the original file metadata to the new `xarray` `dataarray`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tJndWExgyVzl",
        "tags": []
      },
      "outputs": [],
      "source": [
        "def calc_evi(red, blue, nir):\n",
        "      # Create EVI xarray.DataArray that has the same coordinates and metadata\n",
        "      evi = red.copy()\n",
        "      # Calculate the EVI\n",
        "      evi_data = 2.5 * ((nir.data - red.data) / (nir.data + 6.0 * red.data - 7.5 * blue.data + 1.0))\n",
        "      # Replace the Red xarray.DataArray data with the new EVI data\n",
        "      evi.data = evi_data\n",
        "      # exclude the inf values\n",
        "      evi = xr.where(evi != np.inf, evi, np.nan, keep_attrs=True)\n",
        "      # change the long_name in the attributes\n",
        "      evi.attrs['long_name'] = 'EVI'\n",
        "      evi.attrs['scale_factor'] = 1\n",
        "      return evi\n",
        "\n",
        "\n",
        "def calc_ndvi(red, nir):\n",
        "    # Create NDVI xarray.DataArray with the same coordinates and metadata\n",
        "    ndvi = red.copy()\n",
        "    # Calculate NDVI\n",
        "    ndvi_data = (nir.data - red.data) / (nir.data + red.data)\n",
        "    # Replace the Red xarray.DataArray data with the new NDVI data\n",
        "    ndvi.data = ndvi_data\n",
        "    # Exclude inf values\n",
        "    ndvi = xr.where(np.isfinite(ndvi), ndvi, np.nan, keep_attrs=True)\n",
        "    # Update attributes\n",
        "    ndvi.attrs['long_name'] = 'NDVI'\n",
        "    ndvi.attrs['scale_factor'] = 1\n",
        "    return ndvi"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FgY5h2dkyVzl"
      },
      "source": [
        "Below, apply the EVI function on the scaled data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 360
        },
        "id": "0IN9njhoyVzl",
        "outputId": "bc940d73-9f2f-4a79-c456-69f94ee1e6e6",
        "tags": []
      },
      "outputs": [],
      "source": [
        "evi_cropped = calc_evi(red_cropped_scaled, blue_cropped_scaled, nir_cropped_scaled) # Generate EVI array\n",
        "evi_cropped\n",
        "\n",
        "\n",
        "ndvi_cropped = calc_ndvi(red_cropped_scaled, nir_cropped_scaled) # Calculate\n",
        "ndvi_cropped"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C7QNKuOGyVzl"
      },
      "source": [
        "Next, plot the results using `hvplot`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "sVYnFmgsyVzl",
        "outputId": "b43a11ad-31d3-4f1e-ca3b-fda14f2a440e",
        "tags": []
      },
      "outputs": [],
      "source": [
        "evi_cropped.hvplot.image(cmap='YlGn', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI').opts(title=f'HLS-derived EVI, {evi_cropped.SENSING_TIME}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "ndvi_cropped.hvplot.image(cmap='YlGn', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI').opts(title=f'HLS-derived NDVI, {ndvi_cropped.SENSING_TIME}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import hvplot.xarray\n",
        "import holoviews as hv\n",
        "from bokeh.io.export import export_png\n",
        "from bokeh.io import output_notebook\n",
        "from bokeh.plotting import show\n",
        "from bokeh.resources import INLINE\n",
        "\n",
        "output_notebook(resources=INLINE)\n",
        "\n",
        "# Create the plot\n",
        "hvplot_obj = ndvi_cropped.hvplot.image(\n",
        "    cmap='YlGn',\n",
        "    frame_width=800,\n",
        "    fontscale=1.6,\n",
        "    crs='EPSG:32610',\n",
        "    tiles='ESRI'\n",
        ").opts(\n",
        "    title=f'HLS-derived NDVI, {ndvi_cropped.SENSING_TIME}'\n",
        ")\n",
        "\n",
        "# Convert to Bokeh figure\n",
        "bokeh_fig = hv.render(hvplot_obj, backend='bokeh')\n",
        "\n",
        "# Export as PNG\n",
        "export_png(bokeh_fig, filename=\"Site_HE.png\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wn4sI5UNyVzl"
      },
      "source": [
        "Above, notice that variation of green level appearing in different fields in our ROI, some being much greener than the others."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hZSDuyv4yVzl"
      },
      "source": [
        "### 4.2 Quality Filtering\n",
        "\n",
        "For HLS v2.0 products, all quality information is included in the Fmask layer. This layer includes values corresponding to combinations of bits that represent\n",
        "different quality descriptions at each location within the scene.  Bits are ordered `76543210` and correspond to the following quality descriptions:  \n",
        "|Bit Number|Mask Name|Bit Value|Description|\n",
        "|---|---|---|---|\n",
        "|7-6|Aerosol<br>Level|11<br>10<br>01<br>00|High<br>Medium<br>Low<br>Clear<br>|\n",
        "|5|Water|1<br>0|Yes<br>No|\n",
        "|4|Snow/Ice|1<br>0|Yes<br>No|\n",
        "|3|Cloud<br>Shadow|1<br>0|Yes<br>No|\n",
        "|2|Cloud/Shadow<br>Adjacent|1<br>0|Yes<br>No|\n",
        "|1|Cloud|1<br>0|Yes<br>No|\n",
        "|0|Cirrus|Reserved|NA|\n",
        "\n",
        "For example, an 8bit integer 224 converted to binary is 11100000. This would indicate high aerosol (bits 7-6), and water (bit 5) are present in a pixel with that value.\n",
        "\n",
        "Plot the cropped fmask layer to see examples of the quality values in our scene. You can hover the mouse over regions to see the values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "WZc_8x6tyVzl",
        "outputId": "07b1a0c2-4dbf-4abc-c368-182cd00c2930"
      },
      "outputs": [],
      "source": [
        "fmask_cropped.hvplot.image(cmap='viridis', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI').opts(title=f'HLS Fmask, {fmask_cropped.SENSING_TIME}')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JRmlyHftyVzm"
      },
      "source": [
        "We can select select the bits we want to mask from our analysis. In this case, we will mask pixels identified as clouds (1), cloud/shadow adjacent (2), cloud shadow (3), snow/ice (4), and water (5). We will ignore the aerosol levels. Create a list of those bit numbers:  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r-CnrfAAyVzm"
      },
      "outputs": [],
      "source": [
        "bit_nums = [1,2,3,4,5]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gwf4sleCyVzm"
      },
      "source": [
        "Now we can build a function to create a binary mask layer from the `Fmask` layers. This function does a couple things:  \n",
        "\n",
        "1. Creates and empty mask Layer\n",
        "2. Applies a bitwise AND operation to determine if the Fmask value has the\n",
        "selected bit number when converted to binary.\n",
        "4. If so, the mask value is set to 1, then the mask is updated using a bitwise\n",
        "OR operation to update the layer for each selected bit as we loop through the\n",
        "selected bit numbers.\n",
        "5. Lastly, it returns the new mask layer we can use to filter our data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fRI2kMgvyVzm"
      },
      "outputs": [],
      "source": [
        "def create_quality_mask(quality_data, bit_nums: list = [1, 2, 3, 4, 5]):\n",
        "    \"\"\"\n",
        "    Uses the Fmask layer and bit numbers to create a binary mask of good pixels.\n",
        "    By default, bits 1-5 are used.\n",
        "    \"\"\"\n",
        "    mask_array = np.zeros((quality_data.shape[0], quality_data.shape[1]))\n",
        "    # Remove/Mask Fill Values and Convert to Integer\n",
        "    quality_data = np.nan_to_num(quality_data, 0).astype(np.int8)\n",
        "    for bit in bit_nums:\n",
        "        # Create a Single Binary Mask Layer\n",
        "        mask_temp = np.array(quality_data) & 1 << bit > 0\n",
        "        mask_array = np.logical_or(mask_array, mask_temp)\n",
        "    return mask_array"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nmJ8ymZ3yVzm"
      },
      "source": [
        "Apply the function to the data from our cropped Fmask layer to build a mask, then use it to filter our cropped EVI data."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J9AAa47jyVzm"
      },
      "outputs": [],
      "source": [
        "mask_layer = create_quality_mask(fmask_cropped.data, bit_nums)\n",
        "evi_cropped_qf = evi_cropped.where(~mask_layer)\n",
        "\n",
        "mask_layer = create_quality_mask(fmask_cropped.data, bit_nums)\n",
        "ndvi_cropped_qf = ndvi_cropped.where(~mask_layer)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QH46YUkZyVzm"
      },
      "source": [
        "We can now visualize our quality filtered data!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "pX2sdxvbyVzm",
        "outputId": "38c806a7-3ed1-4da9-8188-a594b901a2b0"
      },
      "outputs": [],
      "source": [
        "evi_cropped_qf.hvplot.image(cmap='YlGn', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI' ).opts(title=f'Quality Filtered HLS-derived EVI, {evi_cropped.SENSING_TIME}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "ndvi_cropped_qf.hvplot.image(cmap='YlGn', frame_width= 800, fontscale=1.6, crs='EPSG:32610', tiles='ESRI' ).opts(title=f'Quality Filtered HLS-derived EVI, {ndvi_cropped.SENSING_TIME}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import hvplot.xarray\n",
        "import holoviews as hv\n",
        "from bokeh.io.export import export_png\n",
        "from bokeh.io import output_notebook\n",
        "from bokeh.plotting import show\n",
        "from bokeh.resources import INLINE\n",
        "\n",
        "output_notebook(resources=INLINE)\n",
        "\n",
        "# Create the plot\n",
        "hvplot_obj = ndvi_cropped_qf.hvplot.image(\n",
        "    cmap='YlGn',\n",
        "    frame_width=800,\n",
        "    fontscale=1.6,\n",
        "    crs='EPSG:32610',\n",
        "    tiles='ESRI'\n",
        ").opts(\n",
        "    title=f'HLS-derived NDVI, {ndvi_cropped_qf.SENSING_TIME}'\n",
        ")\n",
        "\n",
        "# Convert to Bokeh figure\n",
        "bokeh_fig = hv.render(hvplot_obj, backend='bokeh')\n",
        "\n",
        "# Export as PNG\n",
        "export_png(bokeh_fig, filename=\"Site_HE_2.png\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C52CPKVzyVzm"
      },
      "source": [
        "We can see above that pixels where water is present in the scene have been mostly removed."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "phW0EVJZyVzm"
      },
      "source": [
        "### 4.3 Export to COG\n",
        "\n",
        "In this section, create an output filename and export the cropped EVI to COG. We will do this by modifying a filename from our list of links."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "yQ7wVWLxyVzn",
        "outputId": "be8ae6a0-c574-4508-a21b-c1dd26f769b7",
        "tags": []
      },
      "outputs": [],
      "source": [
        "original_name = evi_band_links[0].split('/')[-1]\n",
        "original_name"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J-8glidgyVzn"
      },
      "source": [
        "The standard format  for HLS S30 V2.0 and HLS L30 V2.0 filenames is as follows:\n",
        "> **HLS.S30/HLS.L30**: Product Short Name    \n",
        "**T10TEK**: MGRS Tile ID (T+5-digits)  \n",
        "**2020273T190109**: Julian Date and Time of Acquisition (YYYYDDDTHHMMSS)  \n",
        "**v2.0**: Product Version   \n",
        "**B8A/B05**: Spectral Band  \n",
        "**.tif**: Data Format (Cloud Optimized GeoTIFF)  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7gg4tTUeyVzn"
      },
      "source": [
        "For additional information on HLS naming conventions, be sure to check out the [HLS Overview Page](https://lpdaac.usgs.gov/data/get-started-data/collection-overview/missions/harmonized-landsat-sentinel-2-hls-overview/#hls-naming-conventions).\n",
        "\n",
        "Now modify the filename to describe that its EVI, cropped to an ROI."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "K-0EKvtEyVzn",
        "outputId": "4e74853b-d635-44d1-a4e1-f5d4fa31c3b3",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# out_name = f\"{original_name.split('v2.0')[0]}v2.0_EVI_cropped.tif\"  # Generate output name from the original filename\n",
        "# out_name\n",
        "\n",
        "out_name = f\"{original_name.split('v2.0')[0]}v2_Site_HE.tif\"  # Generate output name from the original filename\n",
        "out_name"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QIrp3i1OyVzn"
      },
      "source": [
        "Use the `COG` driver to write a local raster output. A cloud-optimized geotiff (COG) is a geotiff file that has been tiled and includes overviews so it can be accessed and previewed without having to load the entire image into memory at once."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CF70xh6iyVzn",
        "tags": []
      },
      "outputs": [],
      "source": [
        "out_folder = f'/{path_to_data}/'\n",
        "ndvi_cropped.rio.to_raster(raster_path=f'{out_folder}{out_name}', driver='COG')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "pntla4L3yVzn",
        "tags": []
      },
      "outputs": [],
      "source": [
        "del evi_cropped, out_folder, out_name, red_cropped, blue_cropped, nir_cropped, red_cropped_scaled, blue_cropped_scaled, nir_cropped_scaled"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eXZneR-myVzn"
      },
      "source": [
        "## 5. Automation <a id=\"automation\"></a>\n",
        "\n",
        "In this section, automate sections 4-5 for each HLS item that intersects our spatiotemporal subset of interest. Loop through each item and subset to the desired bands, load the spatial subset into memory, apply the scale factor, calculate EVI, and export as a Cloud Optimized GeoTIFF."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VLbLJ4PNyVzn",
        "outputId": "a152205b-0e73-4e8b-81f2-8d128daa3a89",
        "tags": []
      },
      "outputs": [],
      "source": [
        "len(hls_results_urls)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vCDNOC3tyVzn"
      },
      "source": [
        "Now put it all together and loop through each of the files, visualize and export cropped EVI files.\n",
        "Be patient with the for loop below, we are accessing 312 cog files (4 per granule). This cell may take around 20-30 minutes to complete depending on internet speeds."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LEZqqXdlyVzn",
        "outputId": "81df559b-d173-4502-81bf-184bf3a84e35",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# for j, h in enumerate(hls_results_urls):\n",
        "\n",
        "#     # outName = h[0].split('/')[-1].split('v2.0')[0] +'v2.0_EVI_cropped.tif'\n",
        "#     outName = h[0].split('/')[-1].split('v2.0')[0] +'v2.0_NDVI_cropped.tif'\n",
        "#     print(outName)\n",
        "\n",
        "#     evi_band_links = []\n",
        "#     if h[0].split('/')[4] == 'HLSS30.020':\n",
        "#         evi_bands = ['B8A', 'B04', 'B02', 'Fmask'] # NIR RED BLUE\n",
        "#     else:\n",
        "#         evi_bands = ['B05', 'B04', 'B02', 'Fmask'] # NIR RED BLUE\n",
        "\n",
        "#     for a in h:\n",
        "#         if any(b in a for b in evi_bands):\n",
        "#             evi_band_links.append(a)\n",
        "\n",
        "\n",
        "#     # Check if file already exists in output directory, if yes--skip that file and move to the next observation\n",
        "#     if os.path.exists(f'/{path_to_data}/{outName}'):\n",
        "#         print(f\"{outName} has already been processed and is available in this directory, moving to next file.\")\n",
        "#         continue\n",
        "\n",
        "#     # # Use vsicurl to load the data directly into memory (be patient, may take a few seconds)\n",
        "#     # chunk_size = dict(band=1, x=512, y=512) # Tiles have 1 band and are divided into 512x512 pixel chunks\n",
        "#     # for e in evi_band_links:\n",
        "#     #     print(e)\n",
        "#     #     if e.rsplit('.', 2)[-2] == evi_bands[0]:      # NIR index\n",
        "#     #         nir = rxr.open_rasterio(e, chunks=chunk_size, masked= True).squeeze('band', drop=True)\n",
        "#     #         nir.attrs['scale_factor'] = 0.0001                         # hard coded the scale_factor attribute\n",
        "#     #     elif e.rsplit('.', 2)[-2] == evi_bands[1]:    # red index\n",
        "#     #         red = rxr.open_rasterio(e, chunks=chunk_size, masked= True).squeeze('band', drop=True)\n",
        "#     #         red.attrs['scale_factor'] = 0.0001                         # hard coded the scale_factor attribute\n",
        "#     #     elif e.rsplit('.', 2)[-2] == evi_bands[2]:    # blue index\n",
        "#     #         blue = rxr.open_rasterio(e, chunks=chunk_size, masked= True).squeeze('band', drop=True)\n",
        "#     #         blue.attrs['scale_factor'] = 0.0001                        # hard coded the scale_factor attribute\n",
        "#     #     elif e.rsplit('.', 2)[-2] == evi_bands[3]:    # Fmask index\n",
        "#     #         fmask = rxr.open_rasterio(e, chunks=chunk_size, masked= True).squeeze('band', drop=True)\n",
        "\n",
        "#     chunk_size = dict(band=1, x=512, y=512)\n",
        "#     for e in evi_band_links:\n",
        "#         local_path = download_file(e, local_dir)\n",
        "#         fname = os.path.splitext(os.path.basename(e))[0].split('.')[-1]\n",
        "\n",
        "#         if fname == evi_bands[0]:  # NIR\n",
        "#             nir = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#             print('Loaded nir')\n",
        "#             nir.attrs['scale_factor'] = 0.0001\n",
        "#         elif fname == evi_bands[1]:  # red\n",
        "#             red = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#             print('Loaded red')\n",
        "#             red.attrs['scale_factor'] = 0.0001\n",
        "#         elif fname == evi_bands[2]:  # blue\n",
        "#             blue = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#             print('Loaded blue')\n",
        "#             blue.attrs['scale_factor'] = 0.0001\n",
        "#         elif fname == evi_bands[3]:  # fmask\n",
        "#             fmask = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "#             print('Loaded fmask')\n",
        "#             # No Scaling for Fmask\n",
        "#     print(\"The COGs have been downloaded and loaded into memory!\")\n",
        "\n",
        "#     fsUTM = field.to_crs(nir.spatial_ref.crs_wkt)\n",
        "\n",
        "#     # Crop to our ROI and apply scaling and masking\n",
        "#     nir_cropped = nir.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "#     red_cropped = red.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "#     blue_cropped = blue.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "#     fmask_cropped = fmask.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "\n",
        "#     print('Cropped')\n",
        "\n",
        "#     # Fix Scaling\n",
        "#     nir_cropped_scaled = scaling(nir_cropped)\n",
        "#     red_cropped_scaled = scaling(red_cropped)\n",
        "#     blue_cropped_scaled = scaling(blue_cropped)\n",
        "\n",
        "#     # Generate EVI\n",
        "\n",
        "#     # evi_cropped = calc_evi(red_cropped_scaled, blue_cropped_scaled, nir_cropped_scaled)\n",
        "#     ndvi_cropped = calc_ndvi(red_cropped_scaled, nir_cropped_scaled)\n",
        "\n",
        "#     print('NDVI Calculated')\n",
        "\n",
        "#     # Apply Quality Filter\n",
        "#     mask_layer = create_quality_mask(fmask_cropped.data)\n",
        "#     ndvi_cropped = ndvi_cropped.where(~mask_layer)\n",
        "\n",
        "#     # Remove any observations that are entirely fill value\n",
        "#     # if np.nansum(evi_cropped.data) == 0.0:\n",
        "#     if np.nansum(ndvi_cropped.data) == 0.0:\n",
        "#         print(f\"File: {h[0].split('/')[-1].rsplit('.', 1)[0]} was entirely fill values and will not be exported.\")\n",
        "#         continue\n",
        "\n",
        "#     ndvi_cropped.rio.to_raster(raster_path=f'/{path_to_data}/{outName}', driver='COG')\n",
        "\n",
        "#     print(f\"Processed file {j+1} of {len(hls_results_urls)}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "########## Parallel Downloads #################\n",
        "\n",
        "import concurrent.futures\n",
        "from functools import partial\n",
        "\n",
        "def process_single_hls(j, h, field, path_to_data, local_dir):\n",
        "    try:\n",
        "        outName = h[0].split('/')[-1].split('v2.0')[0] + 'v2.0_NDVI_cropped.tif'\n",
        "        print(outName)\n",
        "\n",
        "        evi_band_links = []\n",
        "        if h[0].split('/')[4] == 'HLSS30.020':\n",
        "            evi_bands = ['B8A', 'B04', 'B02', 'Fmask']\n",
        "        else:\n",
        "            evi_bands = ['B05', 'B04', 'B02', 'Fmask']\n",
        "\n",
        "        for a in h:\n",
        "            if any(b in a for b in evi_bands):\n",
        "                evi_band_links.append(a)\n",
        "\n",
        "        output_file = f'/{path_to_data}/{outName}'\n",
        "        if os.path.exists(output_file):\n",
        "            print(f\"{outName} already exists. Skipping.\")\n",
        "            return\n",
        "\n",
        "        chunk_size = dict(band=1, x=512, y=512)\n",
        "        for e in evi_band_links:\n",
        "            local_path = download_file(e, local_dir)\n",
        "            fname = os.path.splitext(os.path.basename(e))[0].split('.')[-1]\n",
        "\n",
        "            if fname == evi_bands[0]:\n",
        "                nir = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "                nir.attrs['scale_factor'] = 0.0001\n",
        "            elif fname == evi_bands[1]:\n",
        "                red = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "                red.attrs['scale_factor'] = 0.0001\n",
        "            elif fname == evi_bands[2]:\n",
        "                blue = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "                blue.attrs['scale_factor'] = 0.0001\n",
        "            elif fname == evi_bands[3]:\n",
        "                fmask = rxr.open_rasterio(local_path, chunks=chunk_size, masked=True).squeeze('band', drop=True)\n",
        "\n",
        "        fsUTM = field.to_crs(nir.spatial_ref.crs_wkt)\n",
        "\n",
        "        nir_cropped = nir.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "        red_cropped = red.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "        blue_cropped = blue.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "        fmask_cropped = fmask.rio.clip(fsUTM.geometry.values, fsUTM.crs, all_touched=True)\n",
        "\n",
        "        nir_cropped_scaled = scaling(nir_cropped)\n",
        "        red_cropped_scaled = scaling(red_cropped)\n",
        "        blue_cropped_scaled = scaling(blue_cropped)\n",
        "\n",
        "        ndvi_cropped = calc_ndvi(red_cropped_scaled, nir_cropped_scaled)\n",
        "        mask_layer = create_quality_mask(fmask_cropped.data)\n",
        "        ndvi_cropped = ndvi_cropped.where(~mask_layer)\n",
        "\n",
        "        if np.nansum(ndvi_cropped.data) == 0.0:\n",
        "            print(f\"File {outName} was entirely fill values. Skipping.\")\n",
        "            return\n",
        "\n",
        "        ndvi_cropped.rio.to_raster(raster_path=output_file, driver='COG')\n",
        "        print(f\"Processed file {j+1}\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"Error processing file {j+1}: {e}\")\n",
        "\n",
        "\n",
        "# Parallel Execution\n",
        "max_workers = 20  # Adjust based on your CPU cores and memory\n",
        "with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:\n",
        "    futures = []\n",
        "    for j, h in enumerate(hls_results_urls):\n",
        "        futures.append(executor.submit(process_single_hls, j, h, field, path_to_data, local_dir))\n",
        "\n",
        "    concurrent.futures.wait(futures)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kGGF66ZAyVzn"
      },
      "source": [
        "Now there should be multiple COGs exported to your working directory, that will be used in Section 6 to stack into a time series."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "224Sd_V-yVzn"
      },
      "source": [
        "## 6. Stacking HLS Data <a id=\"stackhls\"></a>\n",
        "\n",
        "In this section we will open multiple HLS-derived EVI COGs and stack them into an `xarray` data array along the time dimension. First list the files we created in the `/data/` directory."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mJUNUM49yVzo"
      },
      "source": [
        "### 6.1 Open and Stack COGs"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNbdQzafyVzo",
        "outputId": "1280efed-eb8b-4a58-bef6-d7bfdac1ccc5",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# evi_dir = f'{path_to_data}'\n",
        "# evi_files = [os.path.abspath(os.path.join(evi_dir, o)) for o in os.listdir(evi_dir) if o.endswith('EVI_cropped.tif')]  # List EVI COGs\n",
        "# print(f\"There are {len(evi_files)} EVI files.\")\n",
        "path_to_data = '/scratch/users/rajarshi/Quanterra/Field_sat_data_HE_90'\n",
        "ndvi_dir = f'{path_to_data}'\n",
        "ndvi_files = [os.path.abspath(os.path.join(ndvi_dir, o)) for o in os.listdir(ndvi_dir) if o.endswith('NDVI_cropped.tif')]  # List EVI COGs\n",
        "print(f\"There are {len(ndvi_files)} NDVI files.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cdyF2EQhyVzo"
      },
      "source": [
        "Note that there are less files than we had above. This is because quality masking left only fill values in our region for a few granules, which were not saved.\n",
        "\n",
        "Create a time index as an xarray variable from the filenames."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rz1TjvuIyVzo",
        "tags": []
      },
      "outputs": [],
      "source": [
        "def time_index_from_filenames(evi_files):\n",
        "    '''\n",
        "    Helper function to create a pandas DatetimeIndex\n",
        "    '''\n",
        "    return [datetime.strptime(f.split('.')[-4], '%Y%jT%H%M%S') for f in evi_files]\n",
        "\n",
        "time = xr.Variable('time', time_index_from_filenames(ndvi_files))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UnUG9jhIyVzo"
      },
      "source": [
        "Next, the cropped HLS COG files are being read using `rioxarray` and a time series stack is created using `xarray`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "67AfbqkNyVzo",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# chunks=dict(band=1, x=512, y=512)\n",
        "\n",
        "# evi_ts = xr.concat([rxr.open_rasterio(f, mask_and_scale=True, chunks=chunks).squeeze('band', drop=True) for f in evi_files], dim=time)\n",
        "# evi_ts.name = 'EVI'\n",
        "\n",
        "\n",
        "chunks=dict(band=1, x=512, y=512)\n",
        "\n",
        "ndvi_ts = xr.concat([rxr.open_rasterio(f, mask_and_scale=True, chunks=chunks).squeeze('band', drop=True) for f in ndvi_files], dim=time)\n",
        "ndvi_ts.name = 'NDVI'"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "sog_U9V-yVzo",
        "outputId": "51082b29-7ee0-4a4f-fbef-8cd14a0a780b",
        "tags": []
      },
      "outputs": [],
      "source": [
        "ndvi_ts = ndvi_ts.sortby(ndvi_ts.time)\n",
        "ndvi_ts"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lu_fzNVxyVzo"
      },
      "source": [
        "### 6.2 Visualize Stacked Time Series\n",
        "\n",
        "Below, use the [`hvPlot`](https://hvplot.pyviz.org/index.html) and [`holoviews`](https://www.holoviews.org/) packages to create an interactive time series plot of the HLS derived EVI data.Basemap layer is also added to provide better context of the areas surrounding our region of interest."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17,
          "referenced_widgets": [
            "4c6d4b2b96ee4d318d7522a61154d0f7"
          ]
        },
        "id": "tv1j458LyVzo",
        "outputId": "1feb485d-7267-48ee-ffc3-bc22da6e11af",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# set the x, y, and z (groupby) dimensions, add a colormap/bar and other parameters.\n",
        "title = 'HLS-derived NDVI'\n",
        "ndvi_ts.hvplot.image(x='x', y='y', groupby = 'time', frame_width= 800, cmap='YlGn', fontscale=1.6, crs='EPSG:32610', tiles = 'EsriImagery')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CkNso4fXyVzo",
        "tags": []
      },
      "source": [
        "Looking at the time series above, the farm fields are pretty stable in terms of EVI during our temporal range. The slow decrease in EVI as we move toward Fall season could show these fields are having some sort of trees rather than crops. I encourage you to expand your temporal range to learn more about the EVI annual and seasonal changes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HEmoCJfSyVzp"
      },
      "source": [
        "Since the data is in an xarray we can intuitively slice or reduce the dataset. Let's select a single time slice from the EVI variable."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KdYdR-yTyVzp"
      },
      "source": [
        "You can use slicing to plot data only for a specific observation, for example."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 629
        },
        "id": "ilHiVFPHyVzp",
        "outputId": "39660013-7385-402e-cc9f-87e86507fb3a",
        "tags": []
      },
      "outputs": [],
      "source": [
        "title = 'HLS-derived NDVI'\n",
        "# evi_cropped.hvplot.image(aspect='equal', cmap='YlGn', frame_width=300).opts(title=f'HLS-derived EVI, {evi_cropped.SENSING_TIME}', clabel='EVI')\n",
        "\n",
        "ndvi_ts.isel(time=1).hvplot.image(x='x', y='y', cmap='YlGn', crs='EPSG:32610', tiles = 'EsriImagery', frame_width= 800, fontscale = 1.6).opts(title=f'{title}, {ndvi_ts.isel(time=4).SENSING_TIME}')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# from selenium import webdriver\n",
        "\n",
        "# driver = webdriver.Chrome()  # or webdriver.Firefox()\n",
        "# export_png(bokeh_fig, filename=\"ndvi_plot_HE.png\", webdriver=driver)\n",
        "# driver.quit()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "import hvplot.xarray\n",
        "import holoviews as hv\n",
        "from bokeh.io.export import export_png\n",
        "from bokeh.plotting import show\n",
        "from selenium import webdriver\n",
        "from selenium.webdriver.firefox.options import Options as FirefoxOptions\n",
        "\n",
        "# Activate Holoviews backend\n",
        "hv.extension('bokeh')\n",
        "\n",
        "# Plot\n",
        "title = 'HLS-derived NDVI'\n",
        "hvplot_obj = ndvi_ts.isel(time=1).hvplot.image(\n",
        "    x='x', y='y',\n",
        "    cmap='YlGn',\n",
        "    crs='EPSG:32610',\n",
        "    tiles='EsriImagery',\n",
        "    frame_width=800,\n",
        "    fontscale=1.6\n",
        ").opts(\n",
        "    title=f'{title}, {ndvi_ts.isel(time=4).SENSING_TIME}'\n",
        ")\n",
        "\n",
        "# Render to Bokeh figure\n",
        "bokeh_fig = hv.render(hvplot_obj, backend='bokeh')\n",
        "\n",
        "# Use headless Firefox\n",
        "options = FirefoxOptions()\n",
        "options.add_argument(\"--headless\")\n",
        "driver = webdriver.Firefox(options=options)  # or webdriver.Chrome()\n",
        "\n",
        "# Export as PNG\n",
        "export_png(bokeh_fig, filename=\"HE_NDVI_map.png\", webdriver=driver)\n",
        "driver.quit()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# FSW"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# import pandas as pd\n",
        "# import importlib.util\n",
        "\n",
        "# # === Step 1: Load the footprint model dynamically ===\n",
        "# spec = importlib.util.spec_from_file_location(\"calc_footprint_FFP\", \"/scratch/users/rajarshi/Quanterra/Footprint/calc_footprint_FFP.py\")\n",
        "# myfootprint = importlib.util.module_from_spec(spec)\n",
        "# spec.loader.exec_module(myfootprint)\n",
        "\n",
        "# # === Step 2: Load the dataset ===\n",
        "# df = pd.read_csv(\"/scratch/users/rajarshi/Quanterra/Footprint/Dataset_FSW.csv\")\n",
        "\n",
        "# # === Step 3: Select one 30-minute record ===\n",
        "# sample = df.iloc[5]  # you can change this index to any row\n",
        "\n",
        "# # === Step 4: Define known and assumed parameters ===\n",
        "# zm = 4.36        # Measurement height above displacement height [m]\n",
        "# z0 = 0.03        # Roughness length for grassland [m]\n",
        "# h = 1000.0       # Boundary layer height [m]\n",
        "# ol = -100.0      # Obukhov length [m]\n",
        "# sigmav = 0.5     # Lateral wind standard deviation [m/s]\n",
        "# ustar = 0.3      # Friction velocity [m/s]\n",
        "# wind_dir = sample.get(\"WIND_DIRECTION\", None)  # optional if available in data\n",
        "\n",
        "# # === Step 5: Call the FFP function ===\n",
        "# FFP_result = myfootprint.FFP(\n",
        "#     zm=zm,\n",
        "#     z0=z0,\n",
        "#     h=h,\n",
        "#     ol=ol, # Monin Obukhov Length \n",
        "#     sigmav=sigmav, \n",
        "#     ustar=ustar, # Friction Velocity\n",
        "#     wind_dir=wind_dir, \n",
        "#     rs=[20., 40., 60., 80., 90.],  # footprint contours\n",
        "#     fig=1                     # set to 1 to show footprint plot\n",
        "# )\n",
        "\n",
        "# # === Step 6: Display output keys ===\n",
        "# print(\"Available outputs:\")\n",
        "# print(FFP_result.keys())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# HE"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# import pandas as pd\n",
        "# import numpy as np\n",
        "# import importlib.util\n",
        "\n",
        "# # === Load both footprint modules ===\n",
        "# spec1 = importlib.util.spec_from_file_location(\"calc_footprint_FFP\", \"/scratch/users/rajarshi/Quanterra/Footprint/calc_footprint_FFP.py\")\n",
        "# myfootprint = importlib.util.module_from_spec(spec1)\n",
        "# spec1.loader.exec_module(myfootprint)\n",
        "\n",
        "# spec2 = importlib.util.spec_from_file_location(\"calc_footprint_FFP_climatology\", \"/scratch/users/rajarshi/Quanterra/Footprint/calc_footprint_FFP_climatology.py\")\n",
        "# myfootprint_clim = importlib.util.module_from_spec(spec2)\n",
        "# spec2.loader.exec_module(myfootprint_clim)\n",
        "\n",
        "# # === Load the dataset ===\n",
        "# df = pd.read_csv(\"/scratch/users/rajarshi/Quanterra/Footprint/Dataset_HE.csv\")\n",
        "\n",
        "# # === Constants ===\n",
        "# k = 0.4\n",
        "# g = 9.81\n",
        "# cp = 1005\n",
        "# rho = 1.225\n",
        "# z0 = 0.03\n",
        "# zm = 4.36\n",
        "# h = 1000.0\n",
        "\n",
        "# # === Precompute all required inputs ===\n",
        "# ustar_list, sigmav_list, ol_list, wind_dir_list = [], [], [], []\n",
        "# valid_rows = []\n",
        "\n",
        "# for index, row in df.iterrows():\n",
        "#     U = row.get(\"WIND_SPEED\", np.nan)\n",
        "#     T_C = row.get(\"AIR_TEMPERATURE\", np.nan)\n",
        "#     H = row.get(\"SENSIBLE_HEAT_FLUX\", np.nan)\n",
        "#     wind_dir = row.get(\"WIND_DIRECTION\", np.nan)\n",
        "\n",
        "#     if pd.notna(U) and U > 0:\n",
        "#         ustar = k * U / np.log(zm / z0)\n",
        "#         sigmav = 0.6 * ustar\n",
        "#     else:\n",
        "#         ustar, sigmav = np.nan, np.nan\n",
        "\n",
        "#     if pd.notna(T_C) and pd.notna(H) and pd.notna(ustar) and ustar > 0.1 and H != 0:\n",
        "#         T_K = T_C + 273.15\n",
        "#         L = -(ustar**3 * T_K) / (k * g * (H / (rho * cp)))\n",
        "#         zm_over_L = zm / L if L != 0 else np.nan\n",
        "#     else:\n",
        "#         L, zm_over_L = np.nan, np.nan\n",
        "\n",
        "#     if pd.notna(ustar) and ustar >= 0.1 and pd.notna(L) and zm_over_L >= -15.5:\n",
        "#         ustar_list.append(ustar)\n",
        "#         sigmav_list.append(sigmav)\n",
        "#         ol_list.append(L)\n",
        "#         wind_dir_list.append(wind_dir)\n",
        "#         valid_rows.append(index)\n",
        "\n",
        "# # === Limit to 200 valid rows for climatology ===\n",
        "\n",
        "# Num_of_days = 30\n",
        "\n",
        "# subset_indices = valid_rows[:Num_of_days*48]\n",
        "# ustar_sub = [ustar_list[i] for i in range(Num_of_days*48)]\n",
        "# sigmav_sub = [sigmav_list[i] for i in range(Num_of_days*48)]\n",
        "# ol_sub = [ol_list[i] for i in range(Num_of_days*48)]\n",
        "# wind_dir_sub = [wind_dir_list[i] for i in range(Num_of_days*48)]\n",
        "\n",
        "# # === Run footprint climatology ===\n",
        "# FFP_climatology = myfootprint_clim.FFP_climatology(\n",
        "#     zm=zm,\n",
        "#     z0=z0,\n",
        "#     umean=None,\n",
        "#     h=[h] * Num_of_days*48,\n",
        "#     ol=ol_sub,\n",
        "#     sigmav=sigmav_sub,\n",
        "#     ustar=ustar_sub,\n",
        "#     wind_dir=wind_dir_sub,\n",
        "#     rs=[20., 40., 60., 80.,90.],\n",
        "#     nx=1000,\n",
        "#     fig=1\n",
        "# )\n",
        "\n",
        "# # === Output keys available ===\n",
        "# print(\"Available outputs:\", FFP_climatology.keys())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# import numpy as np\n",
        "# import matplotlib.pyplot as plt\n",
        "# import geopandas as gpd\n",
        "# import contextily as ctx\n",
        "# from shapely.geometry import Polygon\n",
        "# from matplotlib.patches import Patch\n",
        "\n",
        "# # === 1. Tower Coordinates ===\n",
        "# tower_lat = 31.01776\n",
        "# tower_lon = -91.3122\n",
        "\n",
        "# # === 2. Helper: Convert meters (x, y) â†’ lat/lon ===\n",
        "# def meters_to_latlon(x, y, lat0, lon0):\n",
        "#     delta_lat = y / 111000\n",
        "#     delta_lon = x / (111000 * np.cos(np.radians(lat0)))\n",
        "#     return lat0 + delta_lat, lon0 + delta_lon\n",
        "\n",
        "# # === 3. Create Contours as GeoDataFrames ===\n",
        "# contours = []\n",
        "# labels = ['20%', '40%', '60%', '80%', '90%']\n",
        "# colors = ['red', 'orange', 'green', 'blue', 'white']\n",
        "\n",
        "# for i, (x, y) in enumerate(zip(FFP_climatology['xr'], FFP_climatology['yr'])):\n",
        "#     lat, lon = meters_to_latlon(np.array(x), np.array(y), tower_lat, tower_lon)\n",
        "#     poly = Polygon(zip(lon, lat))\n",
        "#     contours.append({'geometry': poly, 'label': labels[i]})\n",
        "\n",
        "# gdf = gpd.GeoDataFrame(contours, crs='EPSG:4326')\n",
        "\n",
        "# # === 4. Convert to Web Mercator for plotting ===\n",
        "# gdf_web = gdf.to_crs(epsg=3857)\n",
        "# tower_point_web = gpd.GeoDataFrame(geometry=gpd.points_from_xy([tower_lon], [tower_lat]), crs='EPSG:4326').to_crs(epsg=3857)\n",
        "\n",
        "# # === 5. Plot with satellite basemap ===\n",
        "# fig, ax = plt.subplots(figsize=(10, 10))\n",
        "\n",
        "# # Plot contours\n",
        "# for i, row in gdf_web.iterrows():\n",
        "#     gpd.GeoSeries([row.geometry]).plot(ax=ax, facecolor='none', edgecolor=colors[i], linewidth=2)\n",
        "\n",
        "# # Plot tower location\n",
        "# tower_point_web.plot(ax=ax, color='black', marker='o', markersize=50, label='Flux Tower')\n",
        "\n",
        "# # Add basemap\n",
        "# ctx.add_basemap(ax, source=ctx.providers.Esri.WorldImagery)\n",
        "\n",
        "# # === 6. Custom legend handles ===\n",
        "# legend_elements = [Patch(edgecolor=colors[i], facecolor='none', linewidth=2, label=f'{labels[i]} Contour') for i in range(len(labels))]\n",
        "# legend_elements.append(Patch(color='black', label='Flux Tower'))\n",
        "\n",
        "# # Adjust and add legend\n",
        "# fig.subplots_adjust(right=0.8)\n",
        "# ax.legend(handles=legend_elements, loc='center left', bbox_to_anchor=(1, 0.5), fontsize='large', frameon=True)\n",
        "\n",
        "# # Title and display\n",
        "# ax.set_title(\"Flux Footprint Contours over Hurst East\")\n",
        "# plt.tight_layout()\n",
        "# plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BJDio9uyyVzp"
      },
      "source": [
        "Now, plot the time series as boxplots showing the distribution of EVI values for our farm field."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 477
        },
        "id": "Q06lUpgWyVzp",
        "outputId": "1c810908-9577-41c8-b1b9-1b165e9bb904",
        "tags": []
      },
      "outputs": [],
      "source": [
        "ndvi_ts.hvplot.box('NDVI', by=['time'], rot=90, box_fill_color='lightblue', width=900, height=450).opts(ylim=(-0.5,1.5)).opts(title='HE NDVI Timeseries')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "ndvi_ts['time'][0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SFoFv8CoyVzp"
      },
      "source": [
        "The statistics shows a relatively stable green status in these fields during mid May to the end of September 2021."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "biDspiRAyVzp"
      },
      "source": [
        "## 7. Export Statistics<a id=\"export\"></a>\n",
        "\n",
        "Next, calculate statistics for each observation and export to CSV."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g1oBZDauyVzp",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# xarray allows you to easily calculate a number of statistics\n",
        "ndvi_min = ndvi_ts.min(('y', 'x'))\n",
        "ndvi_max = ndvi_ts.max(('y', 'x'))\n",
        "ndvi_mean = ndvi_ts.mean(('y', 'x'))\n",
        "ndvi_sd = ndvi_ts.std(('y', 'x'))\n",
        "ndvi_count = ndvi_ts.count(('y', 'x'))\n",
        "ndvi_median = ndvi_ts.median(('y', 'x'))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lvhOvYVCyVzp"
      },
      "source": [
        "We now have the `mean` and `standard deviation` for each time slice as well as the `maximum` and `minimum` values. Let's do some plotting! We will use the [`hvPlot`](https://hvplot.pyviz.org/index.html) package to create simple but interactive charts/plots. Hover your curser over the visualization to see the data values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 327
        },
        "id": "BZfOb6N2yVzp",
        "outputId": "c976f290-e1bc-4fc0-e410-999504a9fe6b",
        "tags": []
      },
      "outputs": [],
      "source": [
        "ndvi_mean.hvplot.line()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 747
        },
        "id": "bPs-oFaQyVzp",
        "outputId": "22a0910c-9cca-44db-f765-24b94eeebd29",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# Combine line plots for different statistics\n",
        "stats = (ndvi_mean.hvplot.line(height=350, width=450, line_width=1.5, color='red', grid=True, padding=0.05).opts(title='Mean')+\n",
        "    ndvi_sd.hvplot.line(height=350, width=450, line_width=1.5, color='red', grid=True, padding=0.05).opts(title='Standard Deviation')\n",
        "    + ndvi_max.hvplot.line(height=350, width=450, line_width=1.5, color='red', grid=True, padding=0.05).opts(title='Max') +\n",
        "    ndvi_min.hvplot.line(height=350, width=450, line_width=1.5, color='red', grid=True, padding=0.05).opts(title='Min')).cols(2)\n",
        "stats"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fZM7U_VfyVzq"
      },
      "source": [
        "Remember that these graphs are also interactive--hover over the line to see the value for a given date."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D1uOj4-HyVzq"
      },
      "source": [
        "Finally, create a `pandas` dataframe with the statistics, and export to a CSV file."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "32dUitfZyVzq",
        "tags": []
      },
      "outputs": [],
      "source": [
        "# Create pandas dataframe from dictionary\n",
        "df = pd.DataFrame({'Min NDVI': ndvi_min, 'Max NDVI': ndvi_max,\n",
        "                   'Mean NDVI': ndvi_mean, 'Standard Deviation NDVI': ndvi_sd,\n",
        "                   'Median NDVI': ndvi_median, 'Count': ndvi_count})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_MXKUivtyVzq",
        "tags": []
      },
      "outputs": [],
      "source": [
        "df.index = ndvi_ts.time.data                       # Set the observation date as the index\n",
        "df.to_csv(f'/{path_to_data}/HE_NDVI_2023.csv', index=True)  # Export to CSV"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "ndvi_ts.to_netcdf(f'{path_to_data}/HE_NDVI_2023.netcdf')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "rb",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.2"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "4c6d4b2b96ee4d318d7522a61154d0f7": {
          "model_module": "@bokeh/jupyter_bokeh",
          "model_module_version": "^4.0.5",
          "model_name": "BokehModel",
          "state": {
            "_dom_classes": [],
            "_model_module": "@bokeh/jupyter_bokeh",
            "_model_module_version": "^4.0.5",
            "_model_name": "BokehModel",
            "_view_count": 0,
            "_view_module": "@bokeh/jupyter_bokeh",
            "_view_module_version": "^4.0.5",
            "_view_name": "BokehView",
            "combine_events": true,
            "layout": "IPY_MODEL_d566783de79f49ef99c68f05b3f398d0",
            "render_bundle": "{\"docs_json\":{\"3e5af1a2-d8b9-4d98-bbbb-272830ddb4ec\":{\"version\":\"3.6.3\",\"title\":\"Bokeh Application\",\"roots\":[{\"type\":\"object\",\"name\":\"Row\",\"id\":\"c48b047e-c81c-475f-918d-c8c7ba8ca4fc\",\"attributes\":{\"name\":\"Row00916\",\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"type\":\"object\",\"name\":\"ImportedStyleSheet\",\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\",\"attributes\":{\"url\":\"https://cdn.holoviz.org/panel/1.6.1/dist/css/loading.css\"}},{\"type\":\"object\",\"name\":\"ImportedStyleSheet\",\"id\":\"392c9a99-0a57-4e24-bf04-048285c7683a\",\"attributes\":{\"url\":\"https://cdn.holoviz.org/panel/1.6.1/dist/css/listpanel.css\"}},{\"type\":\"object\",\"name\":\"ImportedStyleSheet\",\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\",\"attributes\":{\"url\":\"https://cdn.holoviz.org/panel/1.6.1/dist/bundled/theme/default.css\"}},{\"type\":\"object\",\"name\":\"ImportedStyleSheet\",\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\",\"attributes\":{\"url\":\"https://cdn.holoviz.org/panel/1.6.1/dist/bundled/theme/native.css\"}}],\"margin\":0,\"sizing_mode\":\"stretch_width\",\"align\":\"start\",\"children\":[{\"type\":\"object\",\"name\":\"Spacer\",\"id\":\"8f7e22fd-b2c5-4d37-bc51-8a66030c4707\",\"attributes\":{\"name\":\"HSpacer00929\",\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\"},{\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\"},{\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\"}],\"margin\":0,\"sizing_mode\":\"stretch_width\",\"align\":\"start\"}},{\"type\":\"object\",\"name\":\"Figure\",\"id\":\"3fbe8be1-3569-432f-b182-1f5636b9c722\",\"attributes\":{\"width\":null,\"height\":null,\"margin\":[5,10],\"sizing_mode\":\"fixed\",\"align\":\"start\",\"x_range\":{\"type\":\"object\",\"name\":\"Range1d\",\"id\":\"55054a7c-896b-4e23-bf2b-8d29f56cf1d5\",\"attributes\":{\"name\":\"Longitude\",\"tags\":[[[\"Longitude\",null]],[]],\"start\":-13592526.397301935,\"end\":-13584067.088224294,\"reset_start\":-13592526.397301935,\"reset_end\":-13584067.088224294,\"min_interval\":5}},\"y_range\":{\"type\":\"object\",\"name\":\"Range1d\",\"id\":\"61803a1f-3b6a-4962-a218-09e3e2821c10\",\"attributes\":{\"name\":\"Latitude\",\"tags\":[[[\"Latitude\",null]],{\"type\":\"map\",\"entries\":[[\"invert_yaxis\",false],[\"autorange\",false]]}],\"start\":4849703.4625456575,\"end\":4855345.260449454,\"reset_start\":4849703.4625456575,\"reset_end\":4855345.260449454,\"min_interval\":5}},\"x_scale\":{\"type\":\"object\",\"name\":\"LinearScale\",\"id\":\"cc85b431-a193-47c0-afca-cfbe33ebbee9\"},\"y_scale\":{\"type\":\"object\",\"name\":\"LinearScale\",\"id\":\"03dc0964-7aa6-490f-a534-e98dcfec4349\"},\"title\":{\"type\":\"object\",\"name\":\"Title\",\"id\":\"2c116754-fbd7-42f3-93d9-b388ae6ddc06\",\"attributes\":{\"text\":\"time: 2021-05-02 18:59:11\",\"text_font_size\":\"19.2pt\"}},\"renderers\":[{\"type\":\"object\",\"name\":\"TileRenderer\",\"id\":\"f50999a5-8a70-42e7-8755-097f2b91fb96\",\"attributes\":{\"level\":\"underlay\",\"tile_source\":{\"type\":\"object\",\"name\":\"WMTSTileSource\",\"id\":\"48339037-9aa5-46d0-aef9-19873756615b\",\"attributes\":{\"url\":\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{Z}/{Y}/{X}.jpg\",\"attribution\":\"&copy; <a href=\\\"http://downloads.esri.com/ArcGISOnline/docs/tou_summary.pdf\\\">Esri</a>, Earthstar Geographics\"}}}},{\"type\":\"object\",\"name\":\"GlyphRenderer\",\"id\":\"d547055b-330a-4a34-a10f-216affaf1856\",\"attributes\":{\"data_source\":{\"type\":\"object\",\"name\":\"ColumnDataSource\",\"id\":\"a1a366fc-c38a-4b3c-b963-9ca509c699a2\",\"attributes\":{\"selected\":{\"type\":\"object\",\"name\":\"Selection\",\"id\":\"4a650125-13bb-4653-9b56-031c40077f94\",\"attributes\":{\"indices\":[],\"line_indices\":[]}},\"selection_policy\":{\"type\":\"object\",\"name\":\"UnionRenderers\",\"id\":\"1060cf19-a757-419c-a323-fd2618273183\"},\"data\":{\"type\":\"map\",\"entries\":[[\"x\",[-13591817.2502325]],[\"y\",[4850173.612370973]],[\"dw\",[7041.014938769862]],[\"dh\",[4701.498253163882]],[\"image\",[{\"type\":\"ndarray\",\"array\":{\"type\":\"bytes\",\"data\":\"AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf5O9gT4JmFY+6RacPrEelT75FZQ+WHKEPvICgj5SEII+cBNePoSHYT4g6zo+nUMfPoAeMT4QUH8+CO5/PgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/k72BPgmYVj7pFpw+sR6VPvkVlD5YcoQ+8gKCPlIQgj5wE14+hIdhPiDrOj6dQx8+gB4xPhBQfz4I7n8+AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH+TvYE+CZhWPukWnD6xHpU++RWUPlhyhD7yAoI+UhCCPnATXj6Eh2E+IOs6Pp1DHz6AHjE+EFB/Pgjufz4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/j3x5Pvv6ej4dKYQ+OnmGPlOdjD6zdVo+ttCMPvVw0T5OlMU+MiCyPiZktT4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf6whvT6MupQ+3tnoPpY97j6kbu8+jSHoPoSx4j5iAdU+Yt51PuXrQD5xDzU+O0AdPirdMj62vLA+cLC4PtAXBD+rVqI+1zaTPjDViz7wFHU+4ERiPuwAYj5uVmk+cy5zPvMDdT5hm4M+eDSNPt9FXz6LSo8+S4PXPl460D7VGZg+HajWPoZg0T5nbNI+4cDfPtA33D586cc+yHfTPjQn1z6XCuU+psLlPmND4D4WWdM+m87XPuRk0D4kINA+HrzMPrCATj6+uCU+1itMPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/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AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf0/3Dz4oHhI+gJQhPtTfZT4MEWc+WKBtPum9dD4QoXA+YxBsPiYgbD5a/1g+ZPJfPpL7Zz78aYE+Q2kJP6VAFj9gDxU/RBcWP9O9GT9u9xc/qucSP/PWDT9Dgts+6tkgPqRTDT5+qgI+XhMoPlQkpz79cp0+wplqPo5+jD5w9D4+oBx7PiBJ9z6nrAs/ldULPwZrCz8AdwQ/lEX+PvuGBT9MBQc/+XsHPytvBT+oFQY/Im79PjfJ+D7AQP8+7iQAP85a/j6DuwA/cEbZPh5KoT4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH85OCI+0lkbPkNhNT4upnE+fNxwPtX7dz6x3Wg+OJhwPs4/Zz7GsHA+J4l6PuoRuD5iXRU/KFIYP545GD+mERs/xMwcP7LkFz+hexY/j/0PP6jzuj6tAE8+Iw0ePucFxz2OzqQ9iqHJPfvnBz6sFIc+COZJPoYzRD5+l0A+/c3iPkx+CD8K0Ac/g28HPzKPBj+NVgQ/XjEBP1rvCj9q+Ak/vlsIPxhCCj+UqgY/hGD4PsSO9z6uAwA/Ypr5PmV44T5U9cM+zvmDPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf7RWIT6FfC4+vpVRPvjLVj5SXGA+SDNhPnN1dD7d1XA+Nez3PtmfFj/c6hY/xSoXP6uNGz+0HBs/zq8dPwNiGT9VqAE/fqLIPh561z5g98o+Ga6BPqPwFT4Bb9o90FbXPVhKoj5mkV8+5h9QPqS9az5yQX4+FbPRPnEe1D7WkPI+mKUHP7yeAj+GDwI/CHkJP9phCz8r8AU/lhAFPxqcCT8E6Ac/VBgEP7HMAT+tV/A+4PLqPiYmnD4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8kvyE+SHUPPnDiQD5mTFc+dBtyPhCOkD74awM/eBwTP03WFj9Axxg/XtMaP58PHT9mvB8/PX4XPwvI6j6gKt4+cXoGPxhWCT9Wr9k+um6hPl7YZT7PMx8+LHwyPsfRgD40WLY+lDKiPuAZOD5+6os+zv6qPkINvT6TwQQ/Xh/+PmcgBj8SkQs/Ht8KPyxiDT8GwwY/iuYGP6p5Bj9kZAM/XBT5Pk7W9j7zstA+UnJwPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/Tv1IPlBoEz7KuiM+Ej20Pqw2Az9qpg4/wtMKPxE3Ej9GsxU/0rQYPxD7HD/Dtw0/B5zdPlz13D7cago/w0YGP5AJ5z6qzto+c+TjPgL3xD5XRZQ+qDZlPp76aT4CEUE+zrogPsNYNj7B5X0+kXujPjDdsT7mo9s+lVYGP9wnED+Ktwk/IMMNP8J1DD/IYgI/VNv+Pi2gAT/ERPQ+IE7ePmqVoD4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH9tP0w+8LahPiCP7D5OaAk/1PIGP90ZFD+Hrhc/wQcZP2Gi/z4qB+8+30AAP4YHBT+HAwM/z5sAP37QBD99ev4+gQPQPmMy7D7+1Mg+/jGoPs6AWj6ELDs+qvBYPt9f5D6/5RU/7Kz+PrzG2j65p/M+BLQIPxFMDT92Zgo/BbgHPyPgBz+/3wI/nqj4PgRJ7T5DftU+nkxdPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/0uRTPuQWiT4FBr0+eLH6PmTXDT+ZDww/Qv3dPmrC+D5agQQ/k9gLP8g5+z54+/Y+dYQFP1R7AD8eV/c+db35PlFP5T7ubPU+PQ7gPmYenz6FPpg+UhEQP6fRGT8jvx0//FcgP1XcFj9M6wM/X9vyPgIPBD9kbwg/Tu4DP55g+z6KifI+C5HfPqsTvj4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf7Klbz6oG18+2HuqPtJ5xz7bUM8+G0jsPnIk/z7ujf4++rsAP4m7Aj9p6wU/ny4APzLPBD8tFQs/MC/0PoYa4T6kUcI+eYWNPmbRvT57lxs/ygwfP4BPHz9SlyA/NuMkP9Z9Jz/DiiE/f68KP0n/8z67afI+XxHzPuhZ9z7Qua4+IduCPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8wmY0+1ZQ4Pk78bj6U860+8KTmPgYr4j7Eeug+q4EDP0klBD+WBAc/WFoKP2K1CD/OrQs/yDLYPqBCxj5CCI8+/ssNPzcyHz/EaiE/QJkiP/RAJT/YSCY/5NokP1LwJz//dyY/MbwkP1AFFT87a/U+mc3OPk7Whz4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfxBMoj7Qn4k+oVquPqFY3D6+zfE+zfIEP6xKAz9jCAQ/JWkJP7hJBz8UMdw+rAuePlJV1D7uVBM/hOIcP/DjHz/OrCE/BqwjP/YEJj9HMig/ixQnP8QGJj/tWiQ/g3ohPxONGj/8XuM+54BYPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8+m+k+8qWrPqbwmz6iK8g+hI/1Pkgp6z4Ajfo+cJwAP3qc0z6WO34+TAn8PqNTFj/cSRg/ZR8aP73GGT9Evx0/rn0iP+LgIj89ZSc/WqgqP7mAJz90viQ/XFMXP91PsD4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/YiLlPv0RqT4SY6E++KGmPiV11z5VOtM+fyC+Pu8XkD5XkxA/TtUbP3rHGD92cBo/lIYUP8FCHz+5RyA/tJ8fP7BwHz9PVyQ/jMElP+rjIT/juwM/Q9KBPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH/syZ0+v1R0PtoMYz5I5lM+rgjGPr7rDj9vIhQ/43sXP9KNGT/5rBs/pmYbP/p9Ij/SqR8/CuEYP+BoGj8DeSE/QqQZP/R3tj4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/ofKXPozZID7Xpms+iP/LPhKzAD8nSw4/Y4MTP+qXFD/hkBg/XVMgPxHTHD9H9hc/Z/0YP5hWGj8mRRA/4NOGPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf/Qx4D6wSJE+vsxlPtHtrj4y4ec+ohkJP+ZZDz8A/Rc/tccXP0mBGz/rrRs/bWASP8411j4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH88Tvs+bo26Pk/Vgz4M0Ic+9HHFPjAkBz/yNw0/eJQUPxMUGz9wiRA/hPyjPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAf5i12T4WWZ0+RCODPpMWrz6+WvY+wvUQP3ij9j4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH+cSu4+EIq2Pn6cfT7oJpU+cr94PgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/+4oBP6WgyD4AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH/7igE/paDIPgAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8AAMB/AADAfwAAwH8=\"},\"shape\":[118,179],\"dtype\":\"float32\",\"order\":\"little\"}]]]}}},\"view\":{\"type\":\"object\",\"name\":\"CDSView\",\"id\":\"3768bc09-0aff-464a-9df5-8870cb291f5c\",\"attributes\":{\"filter\":{\"type\":\"object\",\"name\":\"AllIndices\",\"id\":\"64165a93-1948-4062-bc7c-9f8951973340\"}}},\"glyph\":{\"type\":\"object\",\"name\":\"Image\",\"id\":\"2b0d6308-89e2-4e88-ba47-0f52d9790a03\",\"attributes\":{\"tags\":[\"apply_ranges\"],\"x\":{\"type\":\"field\",\"field\":\"x\"},\"y\":{\"type\":\"field\",\"field\":\"y\"},\"dw\":{\"type\":\"field\",\"field\":\"dw\"},\"dh\":{\"type\":\"field\",\"field\":\"dh\"},\"image\":{\"type\":\"field\",\"field\":\"image\"},\"color_mapper\":{\"type\":\"object\",\"name\":\"LinearColorMapper\",\"id\":\"a91d210b-81f2-4a43-93c8-88e51d137438\",\"attributes\":{\"palette\":[\"#ffffe5\",\"#fefee3\",\"#fefee2\",\"#fefee0\",\"#fdfedf\",\"#fdfede\",\"#fdfedc\",\"#fdfedb\",\"#fcfed9\",\"#fcfed8\",\"#fcfed7\",\"#fcfdd5\",\"#fbfdd4\",\"#fbfdd3\",\"#fbfdd1\",\"#fbfdd0\",\"#fafdce\",\"#fafdcd\",\"#fafdcc\",\"#fafdca\",\"#f9fdc9\",\"#f9fdc8\",\"#f9fcc6\",\"#f9fcc5\",\"#f8fcc3\",\"#f8fcc2\",\"#f8fcc1\",\"#f8fcbf\",\"#f7fcbe\",\"#f7fcbc\",\"#f7fcbb\",\"#f7fcba\",\"#f6fbb8\",\"#f5fbb8\",\"#f5fbb7\",\"#f4fab6\",\"#f3fab6\",\"#f2fab5\",\"#f1f9b4\",\"#f0f9b4\",\"#eff8b3\",\"#eef8b2\",\"#edf8b2\",\"#ecf7b1\",\"#ebf7b0\",\"#eaf7af\",\"#e9f6af\",\"#e8f6ae\",\"#e7f5ad\",\"#e6f5ad\",\"#e5f5ac\",\"#e5f4ab\",\"#e4f4ab\",\"#e3f4aa\",\"#e2f3a9\",\"#e1f3a9\",\"#e0f2a8\",\"#dff2a7\",\"#def2a6\",\"#ddf1a6\",\"#dcf1a5\",\"#dbf1a4\",\"#daf0a4\",\"#d9f0a3\",\"#d8efa2\",\"#d7efa2\",\"#d5eea1\",\"#d4eea0\",\"#d3eda0\",\"#d1ec9f\",\"#d0ec9e\",\"#ceeb9e\",\"#cdeb9d\",\"#ccea9c\",\"#cae99c\",\"#c9e99b\",\"#c8e89a\",\"#c6e89a\",\"#c5e799\",\"#c3e698\",\"#c2e698\",\"#c1e597\",\"#bfe596\",\"#bee496\",\"#bde395\",\"#bbe395\",\"#bae294\",\"#b8e293\",\"#b7e193\",\"#b6e092\",\"#b4e091\",\"#b3df91\",\"#b2df90\",\"#b0de8f\",\"#afdd8f\",\"#addd8e\",\"#acdc8d\",\"#aadc8d\",\"#a9db8c\",\"#a7da8b\",\"#a5d98b\",\"#a4d98a\",\"#a2d889\",\"#a0d789\",\"#9fd688\",\"#9dd687\",\"#9bd587\",\"#9ad486\",\"#98d485\",\"#96d385\",\"#95d284\",\"#93d183\",\"#91d183\",\"#90d082\",\"#8ecf81\",\"#8ccf81\",\"#8bce80\",\"#89cd7f\",\"#87cc7f\",\"#86cc7e\",\"#84cb7d\",\"#82ca7d\",\"#81c97c\",\"#7fc97b\",\"#7dc87b\",\"#7cc77a\",\"#7ac779\",\"#78c679\",\"#77c578\",\"#75c477\",\"#73c376\",\"#71c375\",\"#70c275\",\"#6ec174\",\"#6cc073\",\"#6bbf72\",\"#69be71\",\"#67bd70\",\"#65bd6f\",\"#64bc6e\",\"#62bb6e\",\"#60ba6d\",\"#5eb96c\",\"#5db86b\",\"#5bb86a\",\"#59b769\",\"#58b668\",\"#56b567\",\"#54b466\",\"#52b366\",\"#51b265\",\"#4fb264\",\"#4db163\",\"#4bb062\",\"#4aaf61\",\"#48ae60\",\"#46ad5f\",\"#45ad5f\",\"#43ac5e\",\"#41ab5d\",\"#40aa5c\",\"#3fa95b\",\"#3ea75a\",\"#3da65a\",\"#3ca559\",\"#3ba458\",\"#3aa257\",\"#39a156\",\"#38a055\",\"#379f55\",\"#379e54\",\"#369c53\",\"#359b52\",\"#349a51\",\"#339951\",\"#329750\",\"#31964f\",\"#30954e\",\"#2f944d\",\"#2e924c\",\"#2d914c\",\"#2c904b\",\"#2b8f4a\",\"#2a8e49\",\"#298c48\",\"#288b48\",\"#278a47\",\"#278946\",\"#268745\",\"#258644\",\"#248544\",\"#238443\",\"#228342\",\"#218242\",\"#1f8141\",\"#1e8041\",\"#1d7f41\",\"#1c7e40\",\"#1b7e40\",\"#1a7d40\",\"#197c3f\",\"#187b3f\",\"#177a3e\",\"#16793e\",\"#15783e\",\"#13773d\",\"#12773d\",\"#11763d\",\"#10753c\",\"#0f743c\",\"#0e733b\",\"#0d723b\",\"#0c713b\",\"#0b703a\",\"#0a703a\",\"#086f3a\",\"#076e39\",\"#066d39\",\"#056c38\",\"#046b38\",\"#036a38\",\"#026937\",\"#016837\",\"#006837\",\"#006736\",\"#006536\",\"#006435\",\"#006335\",\"#006234\",\"#006134\",\"#006033\",\"#005f33\",\"#005e33\",\"#005d32\",\"#005c32\",\"#005a31\",\"#005931\",\"#005830\",\"#005730\",\"#005630\",\"#00552f\",\"#00542f\",\"#00532e\",\"#00522e\",\"#00512d\",\"#004f2d\",\"#004e2c\",\"#004d2c\",\"#004c2c\",\"#004b2b\",\"#004a2b\",\"#00492a\",\"#00482a\",\"#004729\",\"#004629\",\"#004529\"],\"nan_color\":\"rgba(0, 0, 0, 0)\",\"low\":0.02338174730539322,\"high\":0.7207643985748291}}}},\"selection_glyph\":{\"type\":\"object\",\"name\":\"Image\",\"id\":\"87c38110-6a5d-4a87-977d-c16067f45dc7\",\"attributes\":{\"tags\":[\"apply_ranges\"],\"x\":{\"type\":\"field\",\"field\":\"x\"},\"y\":{\"type\":\"field\",\"field\":\"y\"},\"dw\":{\"type\":\"field\",\"field\":\"dw\"},\"dh\":{\"type\":\"field\",\"field\":\"dh\"},\"global_alpha\":{\"type\":\"value\",\"value\":1.0},\"image\":{\"type\":\"field\",\"field\":\"image\"},\"color_mapper\":{\"id\":\"a91d210b-81f2-4a43-93c8-88e51d137438\"}}},\"nonselection_glyph\":{\"type\":\"object\",\"name\":\"Image\",\"id\":\"f3467284-4cb0-467b-a6c5-716e32457c5e\",\"attributes\":{\"tags\":[\"apply_ranges\"],\"x\":{\"type\":\"field\",\"field\":\"x\"},\"y\":{\"type\":\"field\",\"field\":\"y\"},\"dw\":{\"type\":\"field\",\"field\":\"dw\"},\"dh\":{\"type\":\"field\",\"field\":\"dh\"},\"global_alpha\":{\"type\":\"value\",\"value\":0.1},\"image\":{\"type\":\"field\",\"field\":\"image\"},\"color_mapper\":{\"id\":\"a91d210b-81f2-4a43-93c8-88e51d137438\"}}},\"muted_glyph\":{\"type\":\"object\",\"name\":\"Image\",\"id\":\"e3cfcd53-7052-4ec9-a160-e716a6efceb9\",\"attributes\":{\"tags\":[\"apply_ranges\"],\"x\":{\"type\":\"field\",\"field\":\"x\"},\"y\":{\"type\":\"field\",\"field\":\"y\"},\"dw\":{\"type\":\"field\",\"field\":\"dw\"},\"dh\":{\"type\":\"field\",\"field\":\"dh\"},\"global_alpha\":{\"type\":\"value\",\"value\":0.2},\"image\":{\"type\":\"field\",\"field\":\"image\"},\"color_mapper\":{\"id\":\"a91d210b-81f2-4a43-93c8-88e51d137438\"}}}}}],\"toolbar\":{\"type\":\"object\",\"name\":\"Toolbar\",\"id\":\"8ac542ce-ecd8-4934-b740-eeb574a6aea5\",\"attributes\":{\"tools\":[{\"type\":\"object\",\"name\":\"WheelZoomTool\",\"id\":\"88966445-0def-4716-ae24-37450f2b4444\",\"attributes\":{\"renderers\":\"auto\",\"zoom_on_axis\":false}},{\"type\":\"object\",\"name\":\"BoxZoomTool\",\"id\":\"37be9ca5-c7f9-4a47-9833-2c8e723d4f9b\",\"attributes\":{\"overlay\":{\"type\":\"object\",\"name\":\"BoxAnnotation\",\"id\":\"02c0df49-c33f-4512-aae4-528ecf8c21fe\",\"attributes\":{\"syncable\":false,\"line_color\":\"black\",\"line_alpha\":1.0,\"line_width\":2,\"line_dash\":[4,4],\"fill_color\":\"lightgrey\",\"fill_alpha\":0.5,\"level\":\"overlay\",\"visible\":false,\"left\":{\"type\":\"number\",\"value\":\"nan\"},\"right\":{\"type\":\"number\",\"value\":\"nan\"},\"top\":{\"type\":\"number\",\"value\":\"nan\"},\"bottom\":{\"type\":\"number\",\"value\":\"nan\"},\"left_units\":\"canvas\",\"right_units\":\"canvas\",\"top_units\":\"canvas\",\"bottom_units\":\"canvas\",\"handles\":{\"type\":\"object\",\"name\":\"BoxInteractionHandles\",\"id\":\"fe1cd3c7-8610-4e04-87df-3f61e489dc4b\",\"attributes\":{\"all\":{\"type\":\"object\",\"name\":\"AreaVisuals\",\"id\":\"13b6ec53-769d-4812-98ba-1ffc44bd038d\",\"attributes\":{\"fill_color\":\"white\",\"hover_fill_color\":\"lightgray\"}}}}}},\"match_aspect\":true}},{\"type\":\"object\",\"name\":\"HoverTool\",\"id\":\"8f430fd9-7f97-4c3b-8c9a-750148a0bb52\",\"attributes\":{\"tags\":[\"hv_created\"],\"renderers\":[{\"id\":\"d547055b-330a-4a34-a10f-216affaf1856\"}],\"tooltips\":[[\"x\",\"$x{custom}\"],[\"y\",\"$y{custom}\"],[\"EVI\",\"@image\"]],\"formatters\":{\"type\":\"map\",\"entries\":[[\"$x\",{\"type\":\"object\",\"name\":\"CustomJSHover\",\"id\":\"e275dd74-f324-4d62-8c21-0b01fe05b819\",\"attributes\":{\"code\":\"\\n        const projections = Bokeh.require(\\\"core/util/projections\\\");\\n        const {snap_x, snap_y} = special_vars\\n        const coords = projections.wgs84_mercator.invert(snap_x, snap_y)\\n        return \\\"\\\" + (coords[0]).toFixed(4)\\n    \"}}],[\"$y\",{\"type\":\"object\",\"name\":\"CustomJSHover\",\"id\":\"46a8f1c2-f273-4d09-a23e-d3c0dc411648\",\"attributes\":{\"code\":\"\\n        const projections = Bokeh.require(\\\"core/util/projections\\\");\\n        const {snap_x, snap_y} = special_vars\\n        const coords = projections.wgs84_mercator.invert(snap_x, snap_y)\\n        return \\\"\\\" + (coords[1]).toFixed(4)\\n    \"}}]]}}},{\"type\":\"object\",\"name\":\"PanTool\",\"id\":\"6dedd7f7-5e82-4a38-9836-f9c1d0a1f3f6\"},{\"type\":\"object\",\"name\":\"ResetTool\",\"id\":\"9af2bfdc-e99a-4be3-a481-68e3a1e1922a\"}],\"active_drag\":{\"id\":\"6dedd7f7-5e82-4a38-9836-f9c1d0a1f3f6\"}}},\"left\":[{\"type\":\"object\",\"name\":\"LinearAxis\",\"id\":\"50873130-0ece-41a1-935d-1c21e029c6c2\",\"attributes\":{\"ticker\":{\"type\":\"object\",\"name\":\"MercatorTicker\",\"id\":\"096277c1-fd9f-4cc6-b2e2-2be8580803fa\",\"attributes\":{\"mantissas\":[1,2,5],\"dimension\":\"lat\"}},\"formatter\":{\"type\":\"object\",\"name\":\"MercatorTickFormatter\",\"id\":\"9421365b-d83a-4a20-a1f1-d6982de063b6\",\"attributes\":{\"dimension\":\"lat\"}},\"axis_label\":\"Latitude\",\"axis_label_text_font_size\":\"20.8px\",\"major_label_policy\":{\"type\":\"object\",\"name\":\"AllLabels\",\"id\":\"a6da7974-8cea-4c46-8d57-f74e1837e893\"},\"major_label_text_font_size\":\"17.6px\"}}],\"right\":[{\"type\":\"object\",\"name\":\"ColorBar\",\"id\":\"9048af4f-7a61-49f7-bff7-5d50cee27864\",\"attributes\":{\"location\":[0,0],\"title_text_font_size\":\"20.8px\",\"ticker\":{\"type\":\"object\",\"name\":\"BasicTicker\",\"id\":\"88547390-9b13-47ac-b190-1457d1e2cdba\",\"attributes\":{\"mantissas\":[1,2,5]}},\"major_label_policy\":{\"type\":\"object\",\"name\":\"NoOverlap\",\"id\":\"e97af4f6-868c-4fa3-bd69-559b7c9db568\"},\"major_label_text_font_size\":\"17.6px\",\"label_standoff\":8,\"major_tick_line_color\":\"black\",\"bar_line_color\":\"black\",\"color_mapper\":{\"id\":\"a91d210b-81f2-4a43-93c8-88e51d137438\"}}}],\"below\":[{\"type\":\"object\",\"name\":\"LinearAxis\",\"id\":\"d31a5943-bc1b-492b-a823-0f6f1e9b8ccf\",\"attributes\":{\"ticker\":{\"type\":\"object\",\"name\":\"MercatorTicker\",\"id\":\"ad7a20b8-97fe-4ebd-9df9-c259ea951337\",\"attributes\":{\"mantissas\":[1,2,5],\"dimension\":\"lon\"}},\"formatter\":{\"type\":\"object\",\"name\":\"MercatorTickFormatter\",\"id\":\"aa84d05c-e0e3-48f1-b8d7-95759223fe07\",\"attributes\":{\"dimension\":\"lon\"}},\"axis_label\":\"Longitude\",\"axis_label_text_font_size\":\"20.8px\",\"major_label_policy\":{\"type\":\"object\",\"name\":\"AllLabels\",\"id\":\"f9de6159-ce5c-4da1-ba4d-f6d24c72204a\"},\"major_label_text_font_size\":\"17.6px\"}}],\"center\":[{\"type\":\"object\",\"name\":\"Grid\",\"id\":\"561bff25-12e5-467a-88c6-e445bb9e2995\",\"attributes\":{\"axis\":{\"id\":\"d31a5943-bc1b-492b-a823-0f6f1e9b8ccf\"},\"grid_line_color\":null}},{\"type\":\"object\",\"name\":\"Grid\",\"id\":\"ec7d9648-e0c7-4fb4-bbad-af66e67ea2d0\",\"attributes\":{\"dimension\":1,\"axis\":{\"id\":\"50873130-0ece-41a1-935d-1c21e029c6c2\"},\"grid_line_color\":null}}],\"frame_width\":800,\"frame_height\":504,\"min_border_top\":10,\"min_border_bottom\":10,\"min_border_left\":10,\"min_border_right\":10,\"output_backend\":\"webgl\",\"match_aspect\":true,\"hold_render\":false}},{\"type\":\"object\",\"name\":\"Spacer\",\"id\":\"e1e0ca71-f128-40a4-be94-214a4756f6e9\",\"attributes\":{\"name\":\"HSpacer00930\",\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\"},{\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\"},{\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\"}],\"margin\":0,\"sizing_mode\":\"stretch_width\",\"align\":\"start\"}},{\"type\":\"object\",\"name\":\"panel.models.layout.Column\",\"id\":\"72dac1da-bf2a-41a7-8d76-450635e7fd62\",\"attributes\":{\"name\":\"WidgetBox00917\",\"css_classes\":[\"panel-widget-box\"],\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\"},{\"type\":\"object\",\"name\":\"ImportedStyleSheet\",\"id\":\"be204718-c035-45ff-a9ab-c4c45a4cef10\",\"attributes\":{\"url\":\"https://cdn.holoviz.org/panel/1.6.1/dist/css/widgetbox.css\"}},{\"id\":\"392c9a99-0a57-4e24-bf04-048285c7683a\"},{\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\"},{\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\"}],\"margin\":0,\"align\":[\"end\",\"center\"],\"children\":[{\"type\":\"object\",\"name\":\"panel.models.layout.Column\",\"id\":\"6db796ab-568d-4b82-960f-5e8c227d3b94\",\"attributes\":{\"name\":\"Column00924\",\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\"},{\"id\":\"392c9a99-0a57-4e24-bf04-048285c7683a\"},{\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\"},{\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\"}],\"margin\":0,\"align\":\"start\",\"children\":[{\"type\":\"object\",\"name\":\"Div\",\"id\":\"d13c5f9d-a58b-4e69-9fc2-3607ec9f046a\",\"attributes\":{\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\"},{\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\"},{\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\"}],\"margin\":[5,0,0,10],\"align\":\"start\",\"text\":\"time: <b>2021-05-02 18:59:11</b>\"}},{\"type\":\"object\",\"name\":\"Slider\",\"id\":\"a670975b-9f5f-4aaa-9c18-078dd2848f3a\",\"attributes\":{\"stylesheets\":[\"\\n:host(.pn-loading):before, .pn-loading:before {\\n  background-color: #c3c3c3;\\n  mask-size: auto calc(min(50%, 400px));\\n  -webkit-mask-size: auto calc(min(50%, 400px));\\n}\",{\"id\":\"8c43cc4d-0f1c-4d58-825e-9408ed677053\"},{\"id\":\"a357c7b5-b5ea-4f6d-9615-a6d4dd6f3c84\"},{\"id\":\"b6a8f4e8-4e5f-4523-bf13-a6f12f1f745e\"}],\"margin\":[0,10,5,10],\"align\":\"start\",\"show_value\":false,\"tooltips\":false,\"start\":0,\"end\":74,\"value\":0}}]}}]}}]}}],\"defs\":[{\"type\":\"model\",\"name\":\"ReactiveHTML1\"},{\"type\":\"model\",\"name\":\"FlexBox1\",\"properties\":[{\"name\":\"align_content\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"align_items\",\"kind\":\"Any\",\"default\":\"flex-start\"},{\"name\":\"flex_direction\",\"kind\":\"Any\",\"default\":\"row\"},{\"name\":\"flex_wrap\",\"kind\":\"Any\",\"default\":\"wrap\"},{\"name\":\"gap\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"justify_content\",\"kind\":\"Any\",\"default\":\"flex-start\"}]},{\"type\":\"model\",\"name\":\"FloatPanel1\",\"properties\":[{\"name\":\"config\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"contained\",\"kind\":\"Any\",\"default\":true},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"right-top\"},{\"name\":\"offsetx\",\"kind\":\"Any\",\"default\":null},{\"name\":\"offsety\",\"kind\":\"Any\",\"default\":null},{\"name\":\"theme\",\"kind\":\"Any\",\"default\":\"primary\"},{\"name\":\"status\",\"kind\":\"Any\",\"default\":\"normalized\"}]},{\"type\":\"model\",\"name\":\"GridStack1\",\"properties\":[{\"name\":\"mode\",\"kind\":\"Any\",\"default\":\"warn\"},{\"name\":\"ncols\",\"kind\":\"Any\",\"default\":null},{\"name\":\"nrows\",\"kind\":\"Any\",\"default\":null},{\"name\":\"allow_resize\",\"kind\":\"Any\",\"default\":true},{\"name\":\"allow_drag\",\"kind\":\"Any\",\"default\":true},{\"name\":\"state\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"drag1\",\"properties\":[{\"name\":\"slider_width\",\"kind\":\"Any\",\"default\":5},{\"name\":\"slider_color\",\"kind\":\"Any\",\"default\":\"black\"},{\"name\":\"value\",\"kind\":\"Any\",\"default\":50}]},{\"type\":\"model\",\"name\":\"click1\",\"properties\":[{\"name\":\"terminal_output\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"debug_name\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"clears\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"FastWrapper1\",\"properties\":[{\"name\":\"object\",\"kind\":\"Any\",\"default\":null},{\"name\":\"style\",\"kind\":\"Any\",\"default\":null}]},{\"type\":\"model\",\"name\":\"NotificationAreaBase1\",\"properties\":[{\"name\":\"js_events\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"bottom-right\"},{\"name\":\"_clear\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"NotificationArea1\",\"properties\":[{\"name\":\"js_events\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}},{\"name\":\"notifications\",\"kind\":\"Any\",\"default\":[]},{\"name\":\"position\",\"kind\":\"Any\",\"default\":\"bottom-right\"},{\"name\":\"_clear\",\"kind\":\"Any\",\"default\":0},{\"name\":\"types\",\"kind\":\"Any\",\"default\":[{\"type\":\"map\",\"entries\":[[\"type\",\"warning\"],[\"background\",\"#ffc107\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-exclamation-triangle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]},{\"type\":\"map\",\"entries\":[[\"type\",\"info\"],[\"background\",\"#007bff\"],[\"icon\",{\"type\":\"map\",\"entries\":[[\"className\",\"fas fa-info-circle\"],[\"tagName\",\"i\"],[\"color\",\"white\"]]}]]}]}]},{\"type\":\"model\",\"name\":\"Notification\",\"properties\":[{\"name\":\"background\",\"kind\":\"Any\",\"default\":null},{\"name\":\"duration\",\"kind\":\"Any\",\"default\":3000},{\"name\":\"icon\",\"kind\":\"Any\",\"default\":null},{\"name\":\"message\",\"kind\":\"Any\",\"default\":\"\"},{\"name\":\"notification_type\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_rendered\",\"kind\":\"Any\",\"default\":false},{\"name\":\"_destroyed\",\"kind\":\"Any\",\"default\":false}]},{\"type\":\"model\",\"name\":\"TemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"BootstrapTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"TemplateEditor1\",\"properties\":[{\"name\":\"layout\",\"kind\":\"Any\",\"default\":[]}]},{\"type\":\"model\",\"name\":\"MaterialTemplateActions1\",\"properties\":[{\"name\":\"open_modal\",\"kind\":\"Any\",\"default\":0},{\"name\":\"close_modal\",\"kind\":\"Any\",\"default\":0}]},{\"type\":\"model\",\"name\":\"ReactiveESM1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"JSComponent1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"ReactComponent1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"AnyWidgetComponent1\",\"properties\":[{\"name\":\"esm_constants\",\"kind\":\"Any\",\"default\":{\"type\":\"map\"}}]},{\"type\":\"model\",\"name\":\"request_value1\",\"properties\":[{\"name\":\"fill\",\"kind\":\"Any\",\"default\":\"none\"},{\"name\":\"_synced\",\"kind\":\"Any\",\"default\":null},{\"name\":\"_request_sync\",\"kind\":\"Any\",\"default\":0}]}]}},\"render_items\":[{\"docid\":\"3e5af1a2-d8b9-4d98-bbbb-272830ddb4ec\",\"roots\":{\"c48b047e-c81c-475f-918d-c8c7ba8ca4fc\":\"bbfb02ce-59a6-4059-9270-7537e8b3f19c\"},\"root_ids\":[\"c48b047e-c81c-475f-918d-c8c7ba8ca4fc\"]}],\"div\":\"\\n  <div id=\\\"bbfb02ce-59a6-4059-9270-7537e8b3f19c\\\" data-root-id=\\\"c48b047e-c81c-475f-918d-c8c7ba8ca4fc\\\" style=\\\"display: contents;\\\"></div>\\n\"}"
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
